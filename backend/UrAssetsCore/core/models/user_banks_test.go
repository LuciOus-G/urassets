// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserBanks(t *testing.T) {
	t.Parallel()

	query := UserBanks()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserBanksDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBanksQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserBanks().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBanksSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBankSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserBanksExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserBankExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserBank exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserBankExists to return true, but got false.")
	}
}

func testUserBanksFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userBankFound, err := FindUserBank(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userBankFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserBanksBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserBanks().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserBanksOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserBanks().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserBanksAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userBankOne := &UserBank{}
	userBankTwo := &UserBank{}
	if err = randomize.Struct(seed, userBankOne, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}
	if err = randomize.Struct(seed, userBankTwo, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBankOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBankTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBanks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserBanksCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userBankOne := &UserBank{}
	userBankTwo := &UserBank{}
	if err = randomize.Struct(seed, userBankOne, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}
	if err = randomize.Struct(seed, userBankTwo, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userBankOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userBankTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userBankBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func userBankAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
	*o = UserBank{}
	return nil
}

func testUserBanksHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserBank{}
	o := &UserBank{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userBankDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserBank object: %s", err)
	}

	AddUserBankHook(boil.BeforeInsertHook, userBankBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userBankBeforeInsertHooks = []UserBankHook{}

	AddUserBankHook(boil.AfterInsertHook, userBankAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userBankAfterInsertHooks = []UserBankHook{}

	AddUserBankHook(boil.AfterSelectHook, userBankAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userBankAfterSelectHooks = []UserBankHook{}

	AddUserBankHook(boil.BeforeUpdateHook, userBankBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userBankBeforeUpdateHooks = []UserBankHook{}

	AddUserBankHook(boil.AfterUpdateHook, userBankAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userBankAfterUpdateHooks = []UserBankHook{}

	AddUserBankHook(boil.BeforeDeleteHook, userBankBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userBankBeforeDeleteHooks = []UserBankHook{}

	AddUserBankHook(boil.AfterDeleteHook, userBankAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userBankAfterDeleteHooks = []UserBankHook{}

	AddUserBankHook(boil.BeforeUpsertHook, userBankBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userBankBeforeUpsertHooks = []UserBankHook{}

	AddUserBankHook(boil.AfterUpsertHook, userBankAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userBankAfterUpsertHooks = []UserBankHook{}
}

func testUserBanksInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBanksInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userBankColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserBankToManyBankUserCurrentMonthBills(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c CurrentMonthBill

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, currentMonthBillDBTypes, false, currentMonthBillColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, currentMonthBillDBTypes, false, currentMonthBillColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BankUserID = a.ID
	c.BankUserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BankUserCurrentMonthBills().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BankUserID == b.BankUserID {
			bFound = true
		}
		if v.BankUserID == c.BankUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserBankSlice{&a}
	if err = a.L.LoadBankUserCurrentMonthBills(ctx, tx, false, (*[]*UserBank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BankUserCurrentMonthBills); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BankUserCurrentMonthBills = nil
	if err = a.L.LoadBankUserCurrentMonthBills(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BankUserCurrentMonthBills); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserBankToManyBankUserCurrentMonthIncomes(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c CurrentMonthIncome

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, currentMonthIncomeDBTypes, false, currentMonthIncomeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, currentMonthIncomeDBTypes, false, currentMonthIncomeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.BankUserID = a.ID
	c.BankUserID = a.ID

	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.BankUserCurrentMonthIncomes().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if v.BankUserID == b.BankUserID {
			bFound = true
		}
		if v.BankUserID == c.BankUserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserBankSlice{&a}
	if err = a.L.LoadBankUserCurrentMonthIncomes(ctx, tx, false, (*[]*UserBank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BankUserCurrentMonthIncomes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.BankUserCurrentMonthIncomes = nil
	if err = a.L.LoadBankUserCurrentMonthIncomes(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.BankUserCurrentMonthIncomes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserBankToManyFromBankTransactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.FromBankID, a.ID)
	queries.Assign(&c.FromBankID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.FromBankTransactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.FromBankID, b.FromBankID) {
			bFound = true
		}
		if queries.Equal(v.FromBankID, c.FromBankID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserBankSlice{&a}
	if err = a.L.LoadFromBankTransactions(ctx, tx, false, (*[]*UserBank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromBankTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.FromBankTransactions = nil
	if err = a.L.LoadFromBankTransactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.FromBankTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserBankToManyToBankTransactions(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.ToBankID, a.ID)
	queries.Assign(&c.ToBankID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.ToBankTransactions().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.ToBankID, b.ToBankID) {
			bFound = true
		}
		if queries.Equal(v.ToBankID, c.ToBankID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := UserBankSlice{&a}
	if err = a.L.LoadToBankTransactions(ctx, tx, false, (*[]*UserBank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToBankTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.ToBankTransactions = nil
	if err = a.L.LoadToBankTransactions(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.ToBankTransactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testUserBankToManyAddOpBankUserCurrentMonthBills(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e CurrentMonthBill

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CurrentMonthBill{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, currentMonthBillDBTypes, false, strmangle.SetComplement(currentMonthBillPrimaryKeyColumns, currentMonthBillColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CurrentMonthBill{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBankUserCurrentMonthBills(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BankUserID {
			t.Error("foreign key was wrong value", a.ID, first.BankUserID)
		}
		if a.ID != second.BankUserID {
			t.Error("foreign key was wrong value", a.ID, second.BankUserID)
		}

		if first.R.BankUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BankUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BankUserCurrentMonthBills[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BankUserCurrentMonthBills[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BankUserCurrentMonthBills().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserBankToManyAddOpBankUserCurrentMonthIncomes(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e CurrentMonthIncome

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CurrentMonthIncome{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, currentMonthIncomeDBTypes, false, strmangle.SetComplement(currentMonthIncomePrimaryKeyColumns, currentMonthIncomeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CurrentMonthIncome{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddBankUserCurrentMonthIncomes(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.BankUserID {
			t.Error("foreign key was wrong value", a.ID, first.BankUserID)
		}
		if a.ID != second.BankUserID {
			t.Error("foreign key was wrong value", a.ID, second.BankUserID)
		}

		if first.R.BankUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.BankUser != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.BankUserCurrentMonthIncomes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.BankUserCurrentMonthIncomes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.BankUserCurrentMonthIncomes().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testUserBankToManyAddOpFromBankTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddFromBankTransactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.FromBankID) {
			t.Error("foreign key was wrong value", a.ID, first.FromBankID)
		}
		if !queries.Equal(a.ID, second.FromBankID) {
			t.Error("foreign key was wrong value", a.ID, second.FromBankID)
		}

		if first.R.FromBank != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.FromBank != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.FromBankTransactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.FromBankTransactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.FromBankTransactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserBankToManySetOpFromBankTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetFromBankTransactions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FromBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetFromBankTransactions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FromBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FromBankID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FromBankID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.FromBankID) {
		t.Error("foreign key was wrong value", a.ID, d.FromBankID)
	}
	if !queries.Equal(a.ID, e.FromBankID) {
		t.Error("foreign key was wrong value", a.ID, e.FromBankID)
	}

	if b.R.FromBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FromBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FromBank != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.FromBank != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.FromBankTransactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.FromBankTransactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserBankToManyRemoveOpFromBankTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddFromBankTransactions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.FromBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveFromBankTransactions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.FromBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.FromBankID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.FromBankID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.FromBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.FromBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.FromBank != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.FromBank != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.FromBankTransactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.FromBankTransactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.FromBankTransactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserBankToManyAddOpToBankTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddToBankTransactions(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.ToBankID) {
			t.Error("foreign key was wrong value", a.ID, first.ToBankID)
		}
		if !queries.Equal(a.ID, second.ToBankID) {
			t.Error("foreign key was wrong value", a.ID, second.ToBankID)
		}

		if first.R.ToBank != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.ToBank != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.ToBankTransactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.ToBankTransactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.ToBankTransactions().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testUserBankToManySetOpToBankTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetToBankTransactions(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ToBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetToBankTransactions(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ToBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ToBankID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ToBankID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.ToBankID) {
		t.Error("foreign key was wrong value", a.ID, d.ToBankID)
	}
	if !queries.Equal(a.ID, e.ToBankID) {
		t.Error("foreign key was wrong value", a.ID, e.ToBankID)
	}

	if b.R.ToBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ToBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ToBank != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.ToBank != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.ToBankTransactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.ToBankTransactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testUserBankToManyRemoveOpToBankTransactions(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddToBankTransactions(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.ToBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveToBankTransactions(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.ToBankTransactions().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.ToBankID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.ToBankID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.ToBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.ToBank != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.ToBank != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.ToBank != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.ToBankTransactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.ToBankTransactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.ToBankTransactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testUserBankToOneBankUsingBank(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserBank
	var foreign Bank

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, bankDBTypes, false, bankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bank struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BankID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Bank().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddBankHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *Bank) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserBankSlice{&local}
	if err = local.L.LoadBank(ctx, tx, false, (*[]*UserBank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bank == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Bank = nil
	if err = local.L.LoadBank(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Bank == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserBankToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserBank
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserBankSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserBank)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserBankToOneSetOpBankUsingBank(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c Bank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, bankDBTypes, false, strmangle.SetComplement(bankPrimaryKeyColumns, bankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, bankDBTypes, false, strmangle.SetComplement(bankPrimaryKeyColumns, bankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Bank{&b, &c} {
		err = a.SetBank(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Bank != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserBanks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BankID != x.ID {
			t.Error("foreign key was wrong value", a.BankID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BankID))
		reflect.Indirect(reflect.ValueOf(&a.BankID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BankID != x.ID {
			t.Error("foreign key was wrong value", a.BankID, x.ID)
		}
	}
}
func testUserBankToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserBank
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserBanks[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserBanksReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBanksReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserBankSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserBanksSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserBanks().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userBankDBTypes = map[string]string{`ID`: `uuid`, `BankID`: `uuid`, `UserID`: `uuid`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `IsActive`: `boolean`, `Balance`: `numeric`}
	_               = bytes.MinRead
)

func testUserBanksUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userBankPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userBankAllColumns) == len(userBankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserBanksSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userBankAllColumns) == len(userBankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserBank{}
	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userBankDBTypes, true, userBankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userBankAllColumns, userBankPrimaryKeyColumns) {
		fields = userBankAllColumns
	} else {
		fields = strmangle.SetComplement(
			userBankAllColumns,
			userBankPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserBankSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserBanksUpsert(t *testing.T) {
	t.Parallel()

	if len(userBankAllColumns) == len(userBankPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserBank{}
	if err = randomize.Struct(seed, &o, userBankDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBank: %s", err)
	}

	count, err := UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userBankDBTypes, false, userBankPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserBank: %s", err)
	}

	count, err = UserBanks().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
