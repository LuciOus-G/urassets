// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CurrentMonthWealth is an object representing the database table.
type CurrentMonthWealth struct {
	// Auto Generate UUID V4
	ID          string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UsersID     string        `boil:"users_id" json:"users_id" toml:"users_id" yaml:"users_id"`
	Balance     types.Decimal `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	PeriodMonth null.Time     `boil:"period_month" json:"period_month,omitempty" toml:"period_month" yaml:"period_month,omitempty"`

	R *currentMonthWealthR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currentMonthWealthL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrentMonthWealthColumns = struct {
	ID          string
	UsersID     string
	Balance     string
	PeriodMonth string
}{
	ID:          "id",
	UsersID:     "users_id",
	Balance:     "balance",
	PeriodMonth: "period_month",
}

var CurrentMonthWealthTableColumns = struct {
	ID          string
	UsersID     string
	Balance     string
	PeriodMonth string
}{
	ID:          "current_month_wealth.id",
	UsersID:     "current_month_wealth.users_id",
	Balance:     "current_month_wealth.balance",
	PeriodMonth: "current_month_wealth.period_month",
}

// Generated where

var CurrentMonthWealthWhere = struct {
	ID          whereHelperstring
	UsersID     whereHelperstring
	Balance     whereHelpertypes_Decimal
	PeriodMonth whereHelpernull_Time
}{
	ID:          whereHelperstring{field: "\"current_month_wealth\".\"id\""},
	UsersID:     whereHelperstring{field: "\"current_month_wealth\".\"users_id\""},
	Balance:     whereHelpertypes_Decimal{field: "\"current_month_wealth\".\"balance\""},
	PeriodMonth: whereHelpernull_Time{field: "\"current_month_wealth\".\"period_month\""},
}

// CurrentMonthWealthRels is where relationship names are stored.
var CurrentMonthWealthRels = struct {
	User string
}{
	User: "User",
}

// currentMonthWealthR is where relationships are stored.
type currentMonthWealthR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*currentMonthWealthR) NewStruct() *currentMonthWealthR {
	return &currentMonthWealthR{}
}

func (r *currentMonthWealthR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// currentMonthWealthL is where Load methods for each relationship are stored.
type currentMonthWealthL struct{}

var (
	currentMonthWealthAllColumns            = []string{"id", "users_id", "balance", "period_month"}
	currentMonthWealthColumnsWithoutDefault = []string{"users_id", "balance"}
	currentMonthWealthColumnsWithDefault    = []string{"id", "period_month"}
	currentMonthWealthPrimaryKeyColumns     = []string{"id"}
	currentMonthWealthGeneratedColumns      = []string{}
)

type (
	// CurrentMonthWealthSlice is an alias for a slice of pointers to CurrentMonthWealth.
	// This should almost always be used instead of []CurrentMonthWealth.
	CurrentMonthWealthSlice []*CurrentMonthWealth
	// CurrentMonthWealthHook is the signature for custom CurrentMonthWealth hook methods
	CurrentMonthWealthHook func(context.Context, boil.ContextExecutor, *CurrentMonthWealth) error

	currentMonthWealthQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentMonthWealthType                 = reflect.TypeOf(&CurrentMonthWealth{})
	currentMonthWealthMapping              = queries.MakeStructMapping(currentMonthWealthType)
	currentMonthWealthPrimaryKeyMapping, _ = queries.BindMapping(currentMonthWealthType, currentMonthWealthMapping, currentMonthWealthPrimaryKeyColumns)
	currentMonthWealthInsertCacheMut       sync.RWMutex
	currentMonthWealthInsertCache          = make(map[string]insertCache)
	currentMonthWealthUpdateCacheMut       sync.RWMutex
	currentMonthWealthUpdateCache          = make(map[string]updateCache)
	currentMonthWealthUpsertCacheMut       sync.RWMutex
	currentMonthWealthUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currentMonthWealthAfterSelectMu sync.Mutex
var currentMonthWealthAfterSelectHooks []CurrentMonthWealthHook

var currentMonthWealthBeforeInsertMu sync.Mutex
var currentMonthWealthBeforeInsertHooks []CurrentMonthWealthHook
var currentMonthWealthAfterInsertMu sync.Mutex
var currentMonthWealthAfterInsertHooks []CurrentMonthWealthHook

var currentMonthWealthBeforeUpdateMu sync.Mutex
var currentMonthWealthBeforeUpdateHooks []CurrentMonthWealthHook
var currentMonthWealthAfterUpdateMu sync.Mutex
var currentMonthWealthAfterUpdateHooks []CurrentMonthWealthHook

var currentMonthWealthBeforeDeleteMu sync.Mutex
var currentMonthWealthBeforeDeleteHooks []CurrentMonthWealthHook
var currentMonthWealthAfterDeleteMu sync.Mutex
var currentMonthWealthAfterDeleteHooks []CurrentMonthWealthHook

var currentMonthWealthBeforeUpsertMu sync.Mutex
var currentMonthWealthBeforeUpsertHooks []CurrentMonthWealthHook
var currentMonthWealthAfterUpsertMu sync.Mutex
var currentMonthWealthAfterUpsertHooks []CurrentMonthWealthHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentMonthWealth) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrentMonthWealth) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrentMonthWealth) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrentMonthWealth) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrentMonthWealth) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrentMonthWealth) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrentMonthWealth) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrentMonthWealth) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrentMonthWealth) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthWealthAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentMonthWealthHook registers your hook function for all future operations.
func AddCurrentMonthWealthHook(hookPoint boil.HookPoint, currentMonthWealthHook CurrentMonthWealthHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		currentMonthWealthAfterSelectMu.Lock()
		currentMonthWealthAfterSelectHooks = append(currentMonthWealthAfterSelectHooks, currentMonthWealthHook)
		currentMonthWealthAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		currentMonthWealthBeforeInsertMu.Lock()
		currentMonthWealthBeforeInsertHooks = append(currentMonthWealthBeforeInsertHooks, currentMonthWealthHook)
		currentMonthWealthBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		currentMonthWealthAfterInsertMu.Lock()
		currentMonthWealthAfterInsertHooks = append(currentMonthWealthAfterInsertHooks, currentMonthWealthHook)
		currentMonthWealthAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		currentMonthWealthBeforeUpdateMu.Lock()
		currentMonthWealthBeforeUpdateHooks = append(currentMonthWealthBeforeUpdateHooks, currentMonthWealthHook)
		currentMonthWealthBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		currentMonthWealthAfterUpdateMu.Lock()
		currentMonthWealthAfterUpdateHooks = append(currentMonthWealthAfterUpdateHooks, currentMonthWealthHook)
		currentMonthWealthAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		currentMonthWealthBeforeDeleteMu.Lock()
		currentMonthWealthBeforeDeleteHooks = append(currentMonthWealthBeforeDeleteHooks, currentMonthWealthHook)
		currentMonthWealthBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		currentMonthWealthAfterDeleteMu.Lock()
		currentMonthWealthAfterDeleteHooks = append(currentMonthWealthAfterDeleteHooks, currentMonthWealthHook)
		currentMonthWealthAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		currentMonthWealthBeforeUpsertMu.Lock()
		currentMonthWealthBeforeUpsertHooks = append(currentMonthWealthBeforeUpsertHooks, currentMonthWealthHook)
		currentMonthWealthBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		currentMonthWealthAfterUpsertMu.Lock()
		currentMonthWealthAfterUpsertHooks = append(currentMonthWealthAfterUpsertHooks, currentMonthWealthHook)
		currentMonthWealthAfterUpsertMu.Unlock()
	}
}

// One returns a single currentMonthWealth record from the query.
func (q currentMonthWealthQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrentMonthWealth, error) {
	o := &CurrentMonthWealth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for current_month_wealth")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentMonthWealth records from the query.
func (q currentMonthWealthQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrentMonthWealthSlice, error) {
	var o []*CurrentMonthWealth

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrentMonthWealth slice")
	}

	if len(currentMonthWealthAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentMonthWealth records in the query.
func (q currentMonthWealthQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count current_month_wealth rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentMonthWealthQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if current_month_wealth exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *CurrentMonthWealth) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UsersID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentMonthWealthL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrentMonthWealth interface{}, mods queries.Applicator) error {
	var slice []*CurrentMonthWealth
	var object *CurrentMonthWealth

	if singular {
		var ok bool
		object, ok = maybeCurrentMonthWealth.(*CurrentMonthWealth)
		if !ok {
			object = new(CurrentMonthWealth)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurrentMonthWealth)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurrentMonthWealth))
			}
		}
	} else {
		s, ok := maybeCurrentMonthWealth.(*[]*CurrentMonthWealth)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurrentMonthWealth)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurrentMonthWealth))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &currentMonthWealthR{}
		}
		args[object.UsersID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentMonthWealthR{}
			}

			args[obj.UsersID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CurrentMonthWealths = append(foreign.R.CurrentMonthWealths, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UsersID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CurrentMonthWealths = append(foreign.R.CurrentMonthWealths, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the currentMonthWealth to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CurrentMonthWealths.
func (o *CurrentMonthWealth) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_month_wealth\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"users_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentMonthWealthPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UsersID = related.ID
	if o.R == nil {
		o.R = &currentMonthWealthR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CurrentMonthWealths: CurrentMonthWealthSlice{o},
		}
	} else {
		related.R.CurrentMonthWealths = append(related.R.CurrentMonthWealths, o)
	}

	return nil
}

// CurrentMonthWealths retrieves all the records using an executor.
func CurrentMonthWealths(mods ...qm.QueryMod) currentMonthWealthQuery {
	mods = append(mods, qm.From("\"current_month_wealth\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"current_month_wealth\".*"})
	}

	return currentMonthWealthQuery{q}
}

// FindCurrentMonthWealth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrentMonthWealth(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CurrentMonthWealth, error) {
	currentMonthWealthObj := &CurrentMonthWealth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"current_month_wealth\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, currentMonthWealthObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from current_month_wealth")
	}

	if err = currentMonthWealthObj.doAfterSelectHooks(ctx, exec); err != nil {
		return currentMonthWealthObj, err
	}

	return currentMonthWealthObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrentMonthWealth) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_month_wealth provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentMonthWealthColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currentMonthWealthInsertCacheMut.RLock()
	cache, cached := currentMonthWealthInsertCache[key]
	currentMonthWealthInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currentMonthWealthAllColumns,
			currentMonthWealthColumnsWithDefault,
			currentMonthWealthColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currentMonthWealthType, currentMonthWealthMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currentMonthWealthType, currentMonthWealthMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"current_month_wealth\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"current_month_wealth\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into current_month_wealth")
	}

	if !cached {
		currentMonthWealthInsertCacheMut.Lock()
		currentMonthWealthInsertCache[key] = cache
		currentMonthWealthInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurrentMonthWealth.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrentMonthWealth) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currentMonthWealthUpdateCacheMut.RLock()
	cache, cached := currentMonthWealthUpdateCache[key]
	currentMonthWealthUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currentMonthWealthAllColumns,
			currentMonthWealthPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update current_month_wealth, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"current_month_wealth\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currentMonthWealthPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currentMonthWealthType, currentMonthWealthMapping, append(wl, currentMonthWealthPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update current_month_wealth row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for current_month_wealth")
	}

	if !cached {
		currentMonthWealthUpdateCacheMut.Lock()
		currentMonthWealthUpdateCache[key] = cache
		currentMonthWealthUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currentMonthWealthQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for current_month_wealth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for current_month_wealth")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrentMonthWealthSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthWealthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"current_month_wealth\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currentMonthWealthPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currentMonthWealth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currentMonthWealth")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrentMonthWealth) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no current_month_wealth provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentMonthWealthColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currentMonthWealthUpsertCacheMut.RLock()
	cache, cached := currentMonthWealthUpsertCache[key]
	currentMonthWealthUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			currentMonthWealthAllColumns,
			currentMonthWealthColumnsWithDefault,
			currentMonthWealthColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			currentMonthWealthAllColumns,
			currentMonthWealthPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert current_month_wealth, could not build update column list")
		}

		ret := strmangle.SetComplement(currentMonthWealthAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(currentMonthWealthPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert current_month_wealth, could not build conflict column list")
			}

			conflict = make([]string, len(currentMonthWealthPrimaryKeyColumns))
			copy(conflict, currentMonthWealthPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"current_month_wealth\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(currentMonthWealthType, currentMonthWealthMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currentMonthWealthType, currentMonthWealthMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert current_month_wealth")
	}

	if !cached {
		currentMonthWealthUpsertCacheMut.Lock()
		currentMonthWealthUpsertCache[key] = cache
		currentMonthWealthUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurrentMonthWealth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrentMonthWealth) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentMonthWealth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currentMonthWealthPrimaryKeyMapping)
	sql := "DELETE FROM \"current_month_wealth\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from current_month_wealth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for current_month_wealth")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currentMonthWealthQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currentMonthWealthQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from current_month_wealth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_month_wealth")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrentMonthWealthSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(currentMonthWealthBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthWealthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"current_month_wealth\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentMonthWealthPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currentMonthWealth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_month_wealth")
	}

	if len(currentMonthWealthAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrentMonthWealth) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrentMonthWealth(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrentMonthWealthSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrentMonthWealthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthWealthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"current_month_wealth\".* FROM \"current_month_wealth\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentMonthWealthPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrentMonthWealthSlice")
	}

	*o = slice

	return nil
}

// CurrentMonthWealthExists checks if the CurrentMonthWealth row exists.
func CurrentMonthWealthExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"current_month_wealth\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if current_month_wealth exists")
	}

	return exists, nil
}

// Exists checks if the CurrentMonthWealth row exists.
func (o *CurrentMonthWealth) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CurrentMonthWealthExists(ctx, exec, o.ID)
}
