// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Banks", testBanks)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistories)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotals)
	t.Run("CurrentMonthBills", testCurrentMonthBills)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomes)
	t.Run("CurrentMonthWealths", testCurrentMonthWealths)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategories)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategories)
	t.Run("Goals", testGoals)
	t.Run("GooseMigrations", testGooseMigrations)
	t.Run("TotalWealths", testTotalWealths)
	t.Run("Transactions", testTransactions)
	t.Run("UserBanks", testUserBanks)
	t.Run("UserExpensesCategories", testUserExpensesCategories)
	t.Run("UserIncomeCategories", testUserIncomeCategories)
	t.Run("UserSteps", testUserSteps)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("Banks", testBanksDelete)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesDelete)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsDelete)
	t.Run("CurrentMonthBills", testCurrentMonthBillsDelete)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesDelete)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsDelete)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesDelete)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesDelete)
	t.Run("Goals", testGoalsDelete)
	t.Run("GooseMigrations", testGooseMigrationsDelete)
	t.Run("TotalWealths", testTotalWealthsDelete)
	t.Run("Transactions", testTransactionsDelete)
	t.Run("UserBanks", testUserBanksDelete)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesDelete)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesDelete)
	t.Run("UserSteps", testUserStepsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Banks", testBanksQueryDeleteAll)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesQueryDeleteAll)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsQueryDeleteAll)
	t.Run("CurrentMonthBills", testCurrentMonthBillsQueryDeleteAll)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesQueryDeleteAll)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsQueryDeleteAll)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesQueryDeleteAll)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesQueryDeleteAll)
	t.Run("Goals", testGoalsQueryDeleteAll)
	t.Run("GooseMigrations", testGooseMigrationsQueryDeleteAll)
	t.Run("TotalWealths", testTotalWealthsQueryDeleteAll)
	t.Run("Transactions", testTransactionsQueryDeleteAll)
	t.Run("UserBanks", testUserBanksQueryDeleteAll)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesQueryDeleteAll)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesQueryDeleteAll)
	t.Run("UserSteps", testUserStepsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Banks", testBanksSliceDeleteAll)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesSliceDeleteAll)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsSliceDeleteAll)
	t.Run("CurrentMonthBills", testCurrentMonthBillsSliceDeleteAll)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesSliceDeleteAll)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsSliceDeleteAll)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesSliceDeleteAll)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesSliceDeleteAll)
	t.Run("Goals", testGoalsSliceDeleteAll)
	t.Run("GooseMigrations", testGooseMigrationsSliceDeleteAll)
	t.Run("TotalWealths", testTotalWealthsSliceDeleteAll)
	t.Run("Transactions", testTransactionsSliceDeleteAll)
	t.Run("UserBanks", testUserBanksSliceDeleteAll)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesSliceDeleteAll)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesSliceDeleteAll)
	t.Run("UserSteps", testUserStepsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Banks", testBanksExists)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesExists)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsExists)
	t.Run("CurrentMonthBills", testCurrentMonthBillsExists)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesExists)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsExists)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesExists)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesExists)
	t.Run("Goals", testGoalsExists)
	t.Run("GooseMigrations", testGooseMigrationsExists)
	t.Run("TotalWealths", testTotalWealthsExists)
	t.Run("Transactions", testTransactionsExists)
	t.Run("UserBanks", testUserBanksExists)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesExists)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesExists)
	t.Run("UserSteps", testUserStepsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("Banks", testBanksFind)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesFind)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsFind)
	t.Run("CurrentMonthBills", testCurrentMonthBillsFind)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesFind)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsFind)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesFind)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesFind)
	t.Run("Goals", testGoalsFind)
	t.Run("GooseMigrations", testGooseMigrationsFind)
	t.Run("TotalWealths", testTotalWealthsFind)
	t.Run("Transactions", testTransactionsFind)
	t.Run("UserBanks", testUserBanksFind)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesFind)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesFind)
	t.Run("UserSteps", testUserStepsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("Banks", testBanksBind)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesBind)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsBind)
	t.Run("CurrentMonthBills", testCurrentMonthBillsBind)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesBind)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsBind)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesBind)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesBind)
	t.Run("Goals", testGoalsBind)
	t.Run("GooseMigrations", testGooseMigrationsBind)
	t.Run("TotalWealths", testTotalWealthsBind)
	t.Run("Transactions", testTransactionsBind)
	t.Run("UserBanks", testUserBanksBind)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesBind)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesBind)
	t.Run("UserSteps", testUserStepsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("Banks", testBanksOne)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesOne)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsOne)
	t.Run("CurrentMonthBills", testCurrentMonthBillsOne)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesOne)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsOne)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesOne)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesOne)
	t.Run("Goals", testGoalsOne)
	t.Run("GooseMigrations", testGooseMigrationsOne)
	t.Run("TotalWealths", testTotalWealthsOne)
	t.Run("Transactions", testTransactionsOne)
	t.Run("UserBanks", testUserBanksOne)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesOne)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesOne)
	t.Run("UserSteps", testUserStepsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("Banks", testBanksAll)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesAll)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsAll)
	t.Run("CurrentMonthBills", testCurrentMonthBillsAll)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesAll)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsAll)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesAll)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesAll)
	t.Run("Goals", testGoalsAll)
	t.Run("GooseMigrations", testGooseMigrationsAll)
	t.Run("TotalWealths", testTotalWealthsAll)
	t.Run("Transactions", testTransactionsAll)
	t.Run("UserBanks", testUserBanksAll)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesAll)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesAll)
	t.Run("UserSteps", testUserStepsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("Banks", testBanksCount)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesCount)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsCount)
	t.Run("CurrentMonthBills", testCurrentMonthBillsCount)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesCount)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsCount)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesCount)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesCount)
	t.Run("Goals", testGoalsCount)
	t.Run("GooseMigrations", testGooseMigrationsCount)
	t.Run("TotalWealths", testTotalWealthsCount)
	t.Run("Transactions", testTransactionsCount)
	t.Run("UserBanks", testUserBanksCount)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesCount)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesCount)
	t.Run("UserSteps", testUserStepsCount)
	t.Run("Users", testUsersCount)
}

func TestHooks(t *testing.T) {
	t.Run("Banks", testBanksHooks)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesHooks)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsHooks)
	t.Run("CurrentMonthBills", testCurrentMonthBillsHooks)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesHooks)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsHooks)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesHooks)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesHooks)
	t.Run("Goals", testGoalsHooks)
	t.Run("GooseMigrations", testGooseMigrationsHooks)
	t.Run("TotalWealths", testTotalWealthsHooks)
	t.Run("Transactions", testTransactionsHooks)
	t.Run("UserBanks", testUserBanksHooks)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesHooks)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesHooks)
	t.Run("UserSteps", testUserStepsHooks)
	t.Run("Users", testUsersHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Banks", testBanksInsert)
	t.Run("Banks", testBanksInsertWhitelist)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesInsert)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesInsertWhitelist)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsInsert)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsInsertWhitelist)
	t.Run("CurrentMonthBills", testCurrentMonthBillsInsert)
	t.Run("CurrentMonthBills", testCurrentMonthBillsInsertWhitelist)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesInsert)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesInsertWhitelist)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsInsert)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsInsertWhitelist)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesInsert)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesInsertWhitelist)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesInsert)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesInsertWhitelist)
	t.Run("Goals", testGoalsInsert)
	t.Run("Goals", testGoalsInsertWhitelist)
	t.Run("GooseMigrations", testGooseMigrationsInsert)
	t.Run("GooseMigrations", testGooseMigrationsInsertWhitelist)
	t.Run("TotalWealths", testTotalWealthsInsert)
	t.Run("TotalWealths", testTotalWealthsInsertWhitelist)
	t.Run("Transactions", testTransactionsInsert)
	t.Run("Transactions", testTransactionsInsertWhitelist)
	t.Run("UserBanks", testUserBanksInsert)
	t.Run("UserBanks", testUserBanksInsertWhitelist)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesInsert)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesInsertWhitelist)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesInsert)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesInsertWhitelist)
	t.Run("UserSteps", testUserStepsInsert)
	t.Run("UserSteps", testUserStepsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

func TestReload(t *testing.T) {
	t.Run("Banks", testBanksReload)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesReload)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsReload)
	t.Run("CurrentMonthBills", testCurrentMonthBillsReload)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesReload)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsReload)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesReload)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesReload)
	t.Run("Goals", testGoalsReload)
	t.Run("GooseMigrations", testGooseMigrationsReload)
	t.Run("TotalWealths", testTotalWealthsReload)
	t.Run("Transactions", testTransactionsReload)
	t.Run("UserBanks", testUserBanksReload)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesReload)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesReload)
	t.Run("UserSteps", testUserStepsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Banks", testBanksReloadAll)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesReloadAll)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsReloadAll)
	t.Run("CurrentMonthBills", testCurrentMonthBillsReloadAll)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesReloadAll)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsReloadAll)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesReloadAll)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesReloadAll)
	t.Run("Goals", testGoalsReloadAll)
	t.Run("GooseMigrations", testGooseMigrationsReloadAll)
	t.Run("TotalWealths", testTotalWealthsReloadAll)
	t.Run("Transactions", testTransactionsReloadAll)
	t.Run("UserBanks", testUserBanksReloadAll)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesReloadAll)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesReloadAll)
	t.Run("UserSteps", testUserStepsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Banks", testBanksSelect)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesSelect)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsSelect)
	t.Run("CurrentMonthBills", testCurrentMonthBillsSelect)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesSelect)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsSelect)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesSelect)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesSelect)
	t.Run("Goals", testGoalsSelect)
	t.Run("GooseMigrations", testGooseMigrationsSelect)
	t.Run("TotalWealths", testTotalWealthsSelect)
	t.Run("Transactions", testTransactionsSelect)
	t.Run("UserBanks", testUserBanksSelect)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesSelect)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesSelect)
	t.Run("UserSteps", testUserStepsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Banks", testBanksUpdate)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesUpdate)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsUpdate)
	t.Run("CurrentMonthBills", testCurrentMonthBillsUpdate)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesUpdate)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsUpdate)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesUpdate)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesUpdate)
	t.Run("Goals", testGoalsUpdate)
	t.Run("GooseMigrations", testGooseMigrationsUpdate)
	t.Run("TotalWealths", testTotalWealthsUpdate)
	t.Run("Transactions", testTransactionsUpdate)
	t.Run("UserBanks", testUserBanksUpdate)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesUpdate)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesUpdate)
	t.Run("UserSteps", testUserStepsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Banks", testBanksSliceUpdateAll)
	t.Run("CryptoAssetsHistories", testCryptoAssetsHistoriesSliceUpdateAll)
	t.Run("CryptoAssetsTotals", testCryptoAssetsTotalsSliceUpdateAll)
	t.Run("CurrentMonthBills", testCurrentMonthBillsSliceUpdateAll)
	t.Run("CurrentMonthIncomes", testCurrentMonthIncomesSliceUpdateAll)
	t.Run("CurrentMonthWealths", testCurrentMonthWealthsSliceUpdateAll)
	t.Run("DefaultExpensesCategories", testDefaultExpensesCategoriesSliceUpdateAll)
	t.Run("DefaultIncomeCategories", testDefaultIncomeCategoriesSliceUpdateAll)
	t.Run("Goals", testGoalsSliceUpdateAll)
	t.Run("GooseMigrations", testGooseMigrationsSliceUpdateAll)
	t.Run("TotalWealths", testTotalWealthsSliceUpdateAll)
	t.Run("Transactions", testTransactionsSliceUpdateAll)
	t.Run("UserBanks", testUserBanksSliceUpdateAll)
	t.Run("UserExpensesCategories", testUserExpensesCategoriesSliceUpdateAll)
	t.Run("UserIncomeCategories", testUserIncomeCategoriesSliceUpdateAll)
	t.Run("UserSteps", testUserStepsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
