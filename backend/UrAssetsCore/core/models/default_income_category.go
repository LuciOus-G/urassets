// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// DefaultIncomeCategory is an object representing the database table.
type DefaultIncomeCategory struct {
	ID   string `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name string `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *defaultIncomeCategoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L defaultIncomeCategoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DefaultIncomeCategoryColumns = struct {
	ID   string
	Name string
}{
	ID:   "id",
	Name: "name",
}

var DefaultIncomeCategoryTableColumns = struct {
	ID   string
	Name string
}{
	ID:   "default_income_category.id",
	Name: "default_income_category.name",
}

// Generated where

var DefaultIncomeCategoryWhere = struct {
	ID   whereHelperstring
	Name whereHelperstring
}{
	ID:   whereHelperstring{field: "\"default_income_category\".\"id\""},
	Name: whereHelperstring{field: "\"default_income_category\".\"name\""},
}

// DefaultIncomeCategoryRels is where relationship names are stored.
var DefaultIncomeCategoryRels = struct {
}{}

// defaultIncomeCategoryR is where relationships are stored.
type defaultIncomeCategoryR struct {
}

// NewStruct creates a new relationship struct
func (*defaultIncomeCategoryR) NewStruct() *defaultIncomeCategoryR {
	return &defaultIncomeCategoryR{}
}

// defaultIncomeCategoryL is where Load methods for each relationship are stored.
type defaultIncomeCategoryL struct{}

var (
	defaultIncomeCategoryAllColumns            = []string{"id", "name"}
	defaultIncomeCategoryColumnsWithoutDefault = []string{"name"}
	defaultIncomeCategoryColumnsWithDefault    = []string{"id"}
	defaultIncomeCategoryPrimaryKeyColumns     = []string{"id"}
	defaultIncomeCategoryGeneratedColumns      = []string{}
)

type (
	// DefaultIncomeCategorySlice is an alias for a slice of pointers to DefaultIncomeCategory.
	// This should almost always be used instead of []DefaultIncomeCategory.
	DefaultIncomeCategorySlice []*DefaultIncomeCategory
	// DefaultIncomeCategoryHook is the signature for custom DefaultIncomeCategory hook methods
	DefaultIncomeCategoryHook func(context.Context, boil.ContextExecutor, *DefaultIncomeCategory) error

	defaultIncomeCategoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	defaultIncomeCategoryType                 = reflect.TypeOf(&DefaultIncomeCategory{})
	defaultIncomeCategoryMapping              = queries.MakeStructMapping(defaultIncomeCategoryType)
	defaultIncomeCategoryPrimaryKeyMapping, _ = queries.BindMapping(defaultIncomeCategoryType, defaultIncomeCategoryMapping, defaultIncomeCategoryPrimaryKeyColumns)
	defaultIncomeCategoryInsertCacheMut       sync.RWMutex
	defaultIncomeCategoryInsertCache          = make(map[string]insertCache)
	defaultIncomeCategoryUpdateCacheMut       sync.RWMutex
	defaultIncomeCategoryUpdateCache          = make(map[string]updateCache)
	defaultIncomeCategoryUpsertCacheMut       sync.RWMutex
	defaultIncomeCategoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var defaultIncomeCategoryAfterSelectMu sync.Mutex
var defaultIncomeCategoryAfterSelectHooks []DefaultIncomeCategoryHook

var defaultIncomeCategoryBeforeInsertMu sync.Mutex
var defaultIncomeCategoryBeforeInsertHooks []DefaultIncomeCategoryHook
var defaultIncomeCategoryAfterInsertMu sync.Mutex
var defaultIncomeCategoryAfterInsertHooks []DefaultIncomeCategoryHook

var defaultIncomeCategoryBeforeUpdateMu sync.Mutex
var defaultIncomeCategoryBeforeUpdateHooks []DefaultIncomeCategoryHook
var defaultIncomeCategoryAfterUpdateMu sync.Mutex
var defaultIncomeCategoryAfterUpdateHooks []DefaultIncomeCategoryHook

var defaultIncomeCategoryBeforeDeleteMu sync.Mutex
var defaultIncomeCategoryBeforeDeleteHooks []DefaultIncomeCategoryHook
var defaultIncomeCategoryAfterDeleteMu sync.Mutex
var defaultIncomeCategoryAfterDeleteHooks []DefaultIncomeCategoryHook

var defaultIncomeCategoryBeforeUpsertMu sync.Mutex
var defaultIncomeCategoryBeforeUpsertHooks []DefaultIncomeCategoryHook
var defaultIncomeCategoryAfterUpsertMu sync.Mutex
var defaultIncomeCategoryAfterUpsertHooks []DefaultIncomeCategoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DefaultIncomeCategory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DefaultIncomeCategory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DefaultIncomeCategory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DefaultIncomeCategory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DefaultIncomeCategory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DefaultIncomeCategory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DefaultIncomeCategory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DefaultIncomeCategory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DefaultIncomeCategory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range defaultIncomeCategoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDefaultIncomeCategoryHook registers your hook function for all future operations.
func AddDefaultIncomeCategoryHook(hookPoint boil.HookPoint, defaultIncomeCategoryHook DefaultIncomeCategoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		defaultIncomeCategoryAfterSelectMu.Lock()
		defaultIncomeCategoryAfterSelectHooks = append(defaultIncomeCategoryAfterSelectHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		defaultIncomeCategoryBeforeInsertMu.Lock()
		defaultIncomeCategoryBeforeInsertHooks = append(defaultIncomeCategoryBeforeInsertHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		defaultIncomeCategoryAfterInsertMu.Lock()
		defaultIncomeCategoryAfterInsertHooks = append(defaultIncomeCategoryAfterInsertHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		defaultIncomeCategoryBeforeUpdateMu.Lock()
		defaultIncomeCategoryBeforeUpdateHooks = append(defaultIncomeCategoryBeforeUpdateHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		defaultIncomeCategoryAfterUpdateMu.Lock()
		defaultIncomeCategoryAfterUpdateHooks = append(defaultIncomeCategoryAfterUpdateHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		defaultIncomeCategoryBeforeDeleteMu.Lock()
		defaultIncomeCategoryBeforeDeleteHooks = append(defaultIncomeCategoryBeforeDeleteHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		defaultIncomeCategoryAfterDeleteMu.Lock()
		defaultIncomeCategoryAfterDeleteHooks = append(defaultIncomeCategoryAfterDeleteHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		defaultIncomeCategoryBeforeUpsertMu.Lock()
		defaultIncomeCategoryBeforeUpsertHooks = append(defaultIncomeCategoryBeforeUpsertHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		defaultIncomeCategoryAfterUpsertMu.Lock()
		defaultIncomeCategoryAfterUpsertHooks = append(defaultIncomeCategoryAfterUpsertHooks, defaultIncomeCategoryHook)
		defaultIncomeCategoryAfterUpsertMu.Unlock()
	}
}

// One returns a single defaultIncomeCategory record from the query.
func (q defaultIncomeCategoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*DefaultIncomeCategory, error) {
	o := &DefaultIncomeCategory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for default_income_category")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DefaultIncomeCategory records from the query.
func (q defaultIncomeCategoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (DefaultIncomeCategorySlice, error) {
	var o []*DefaultIncomeCategory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DefaultIncomeCategory slice")
	}

	if len(defaultIncomeCategoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DefaultIncomeCategory records in the query.
func (q defaultIncomeCategoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count default_income_category rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q defaultIncomeCategoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if default_income_category exists")
	}

	return count > 0, nil
}

// DefaultIncomeCategories retrieves all the records using an executor.
func DefaultIncomeCategories(mods ...qm.QueryMod) defaultIncomeCategoryQuery {
	mods = append(mods, qm.From("\"default_income_category\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"default_income_category\".*"})
	}

	return defaultIncomeCategoryQuery{q}
}

// FindDefaultIncomeCategory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDefaultIncomeCategory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*DefaultIncomeCategory, error) {
	defaultIncomeCategoryObj := &DefaultIncomeCategory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"default_income_category\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, defaultIncomeCategoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from default_income_category")
	}

	if err = defaultIncomeCategoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return defaultIncomeCategoryObj, err
	}

	return defaultIncomeCategoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DefaultIncomeCategory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no default_income_category provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(defaultIncomeCategoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	defaultIncomeCategoryInsertCacheMut.RLock()
	cache, cached := defaultIncomeCategoryInsertCache[key]
	defaultIncomeCategoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			defaultIncomeCategoryAllColumns,
			defaultIncomeCategoryColumnsWithDefault,
			defaultIncomeCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(defaultIncomeCategoryType, defaultIncomeCategoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(defaultIncomeCategoryType, defaultIncomeCategoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"default_income_category\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"default_income_category\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into default_income_category")
	}

	if !cached {
		defaultIncomeCategoryInsertCacheMut.Lock()
		defaultIncomeCategoryInsertCache[key] = cache
		defaultIncomeCategoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the DefaultIncomeCategory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DefaultIncomeCategory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	defaultIncomeCategoryUpdateCacheMut.RLock()
	cache, cached := defaultIncomeCategoryUpdateCache[key]
	defaultIncomeCategoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			defaultIncomeCategoryAllColumns,
			defaultIncomeCategoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update default_income_category, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"default_income_category\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, defaultIncomeCategoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(defaultIncomeCategoryType, defaultIncomeCategoryMapping, append(wl, defaultIncomeCategoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update default_income_category row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for default_income_category")
	}

	if !cached {
		defaultIncomeCategoryUpdateCacheMut.Lock()
		defaultIncomeCategoryUpdateCache[key] = cache
		defaultIncomeCategoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q defaultIncomeCategoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for default_income_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for default_income_category")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DefaultIncomeCategorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defaultIncomeCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"default_income_category\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, defaultIncomeCategoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in defaultIncomeCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all defaultIncomeCategory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DefaultIncomeCategory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no default_income_category provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(defaultIncomeCategoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	defaultIncomeCategoryUpsertCacheMut.RLock()
	cache, cached := defaultIncomeCategoryUpsertCache[key]
	defaultIncomeCategoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			defaultIncomeCategoryAllColumns,
			defaultIncomeCategoryColumnsWithDefault,
			defaultIncomeCategoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			defaultIncomeCategoryAllColumns,
			defaultIncomeCategoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert default_income_category, could not build update column list")
		}

		ret := strmangle.SetComplement(defaultIncomeCategoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(defaultIncomeCategoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert default_income_category, could not build conflict column list")
			}

			conflict = make([]string, len(defaultIncomeCategoryPrimaryKeyColumns))
			copy(conflict, defaultIncomeCategoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"default_income_category\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(defaultIncomeCategoryType, defaultIncomeCategoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(defaultIncomeCategoryType, defaultIncomeCategoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert default_income_category")
	}

	if !cached {
		defaultIncomeCategoryUpsertCacheMut.Lock()
		defaultIncomeCategoryUpsertCache[key] = cache
		defaultIncomeCategoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single DefaultIncomeCategory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DefaultIncomeCategory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DefaultIncomeCategory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), defaultIncomeCategoryPrimaryKeyMapping)
	sql := "DELETE FROM \"default_income_category\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from default_income_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for default_income_category")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q defaultIncomeCategoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no defaultIncomeCategoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from default_income_category")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for default_income_category")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DefaultIncomeCategorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(defaultIncomeCategoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defaultIncomeCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"default_income_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, defaultIncomeCategoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from defaultIncomeCategory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for default_income_category")
	}

	if len(defaultIncomeCategoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DefaultIncomeCategory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindDefaultIncomeCategory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DefaultIncomeCategorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DefaultIncomeCategorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), defaultIncomeCategoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"default_income_category\".* FROM \"default_income_category\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, defaultIncomeCategoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DefaultIncomeCategorySlice")
	}

	*o = slice

	return nil
}

// DefaultIncomeCategoryExists checks if the DefaultIncomeCategory row exists.
func DefaultIncomeCategoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"default_income_category\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if default_income_category exists")
	}

	return exists, nil
}

// Exists checks if the DefaultIncomeCategory row exists.
func (o *DefaultIncomeCategory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return DefaultIncomeCategoryExists(ctx, exec, o.ID)
}
