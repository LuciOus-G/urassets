// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CryptoAssetsHistory is an object representing the database table.
type CryptoAssetsHistory struct {
	ID                  string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID              string        `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CryptoAssetsTotalID null.String   `boil:"crypto_assets_total_id" json:"crypto_assets_total_id,omitempty" toml:"crypto_assets_total_id" yaml:"crypto_assets_total_id,omitempty"`
	Name                string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Symbol              string        `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	Value               types.Decimal `boil:"value" json:"value" toml:"value" yaml:"value"`
	CreatedAt           null.Time     `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`

	R *cryptoAssetsHistoryR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cryptoAssetsHistoryL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CryptoAssetsHistoryColumns = struct {
	ID                  string
	UserID              string
	CryptoAssetsTotalID string
	Name                string
	Symbol              string
	Value               string
	CreatedAt           string
}{
	ID:                  "id",
	UserID:              "user_id",
	CryptoAssetsTotalID: "crypto_assets_total_id",
	Name:                "name",
	Symbol:              "symbol",
	Value:               "value",
	CreatedAt:           "created_at",
}

var CryptoAssetsHistoryTableColumns = struct {
	ID                  string
	UserID              string
	CryptoAssetsTotalID string
	Name                string
	Symbol              string
	Value               string
	CreatedAt           string
}{
	ID:                  "crypto_assets_history.id",
	UserID:              "crypto_assets_history.user_id",
	CryptoAssetsTotalID: "crypto_assets_history.crypto_assets_total_id",
	Name:                "crypto_assets_history.name",
	Symbol:              "crypto_assets_history.symbol",
	Value:               "crypto_assets_history.value",
	CreatedAt:           "crypto_assets_history.created_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

type whereHelpertypes_Decimal struct{ field string }

func (w whereHelpertypes_Decimal) EQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertypes_Decimal) NEQ(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertypes_Decimal) LT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertypes_Decimal) LTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertypes_Decimal) GT(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertypes_Decimal) GTE(x types.Decimal) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Time struct{ field string }

func (w whereHelpernull_Time) EQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Time) NEQ(x null.Time) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Time) LT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Time) LTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Time) GT(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Time) GTE(x null.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

func (w whereHelpernull_Time) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Time) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var CryptoAssetsHistoryWhere = struct {
	ID                  whereHelperstring
	UserID              whereHelperstring
	CryptoAssetsTotalID whereHelpernull_String
	Name                whereHelperstring
	Symbol              whereHelperstring
	Value               whereHelpertypes_Decimal
	CreatedAt           whereHelpernull_Time
}{
	ID:                  whereHelperstring{field: "\"crypto_assets_history\".\"id\""},
	UserID:              whereHelperstring{field: "\"crypto_assets_history\".\"user_id\""},
	CryptoAssetsTotalID: whereHelpernull_String{field: "\"crypto_assets_history\".\"crypto_assets_total_id\""},
	Name:                whereHelperstring{field: "\"crypto_assets_history\".\"name\""},
	Symbol:              whereHelperstring{field: "\"crypto_assets_history\".\"symbol\""},
	Value:               whereHelpertypes_Decimal{field: "\"crypto_assets_history\".\"value\""},
	CreatedAt:           whereHelpernull_Time{field: "\"crypto_assets_history\".\"created_at\""},
}

// CryptoAssetsHistoryRels is where relationship names are stored.
var CryptoAssetsHistoryRels = struct {
	CryptoAssetsTotal string
	User              string
}{
	CryptoAssetsTotal: "CryptoAssetsTotal",
	User:              "User",
}

// cryptoAssetsHistoryR is where relationships are stored.
type cryptoAssetsHistoryR struct {
	CryptoAssetsTotal *CryptoAssetsTotal `boil:"CryptoAssetsTotal" json:"CryptoAssetsTotal" toml:"CryptoAssetsTotal" yaml:"CryptoAssetsTotal"`
	User              *User              `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*cryptoAssetsHistoryR) NewStruct() *cryptoAssetsHistoryR {
	return &cryptoAssetsHistoryR{}
}

func (r *cryptoAssetsHistoryR) GetCryptoAssetsTotal() *CryptoAssetsTotal {
	if r == nil {
		return nil
	}
	return r.CryptoAssetsTotal
}

func (r *cryptoAssetsHistoryR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// cryptoAssetsHistoryL is where Load methods for each relationship are stored.
type cryptoAssetsHistoryL struct{}

var (
	cryptoAssetsHistoryAllColumns            = []string{"id", "user_id", "crypto_assets_total_id", "name", "symbol", "value", "created_at"}
	cryptoAssetsHistoryColumnsWithoutDefault = []string{"user_id", "name", "symbol", "value"}
	cryptoAssetsHistoryColumnsWithDefault    = []string{"id", "crypto_assets_total_id", "created_at"}
	cryptoAssetsHistoryPrimaryKeyColumns     = []string{"id"}
	cryptoAssetsHistoryGeneratedColumns      = []string{}
)

type (
	// CryptoAssetsHistorySlice is an alias for a slice of pointers to CryptoAssetsHistory.
	// This should almost always be used instead of []CryptoAssetsHistory.
	CryptoAssetsHistorySlice []*CryptoAssetsHistory
	// CryptoAssetsHistoryHook is the signature for custom CryptoAssetsHistory hook methods
	CryptoAssetsHistoryHook func(context.Context, boil.ContextExecutor, *CryptoAssetsHistory) error

	cryptoAssetsHistoryQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cryptoAssetsHistoryType                 = reflect.TypeOf(&CryptoAssetsHistory{})
	cryptoAssetsHistoryMapping              = queries.MakeStructMapping(cryptoAssetsHistoryType)
	cryptoAssetsHistoryPrimaryKeyMapping, _ = queries.BindMapping(cryptoAssetsHistoryType, cryptoAssetsHistoryMapping, cryptoAssetsHistoryPrimaryKeyColumns)
	cryptoAssetsHistoryInsertCacheMut       sync.RWMutex
	cryptoAssetsHistoryInsertCache          = make(map[string]insertCache)
	cryptoAssetsHistoryUpdateCacheMut       sync.RWMutex
	cryptoAssetsHistoryUpdateCache          = make(map[string]updateCache)
	cryptoAssetsHistoryUpsertCacheMut       sync.RWMutex
	cryptoAssetsHistoryUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cryptoAssetsHistoryAfterSelectMu sync.Mutex
var cryptoAssetsHistoryAfterSelectHooks []CryptoAssetsHistoryHook

var cryptoAssetsHistoryBeforeInsertMu sync.Mutex
var cryptoAssetsHistoryBeforeInsertHooks []CryptoAssetsHistoryHook
var cryptoAssetsHistoryAfterInsertMu sync.Mutex
var cryptoAssetsHistoryAfterInsertHooks []CryptoAssetsHistoryHook

var cryptoAssetsHistoryBeforeUpdateMu sync.Mutex
var cryptoAssetsHistoryBeforeUpdateHooks []CryptoAssetsHistoryHook
var cryptoAssetsHistoryAfterUpdateMu sync.Mutex
var cryptoAssetsHistoryAfterUpdateHooks []CryptoAssetsHistoryHook

var cryptoAssetsHistoryBeforeDeleteMu sync.Mutex
var cryptoAssetsHistoryBeforeDeleteHooks []CryptoAssetsHistoryHook
var cryptoAssetsHistoryAfterDeleteMu sync.Mutex
var cryptoAssetsHistoryAfterDeleteHooks []CryptoAssetsHistoryHook

var cryptoAssetsHistoryBeforeUpsertMu sync.Mutex
var cryptoAssetsHistoryBeforeUpsertHooks []CryptoAssetsHistoryHook
var cryptoAssetsHistoryAfterUpsertMu sync.Mutex
var cryptoAssetsHistoryAfterUpsertHooks []CryptoAssetsHistoryHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CryptoAssetsHistory) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CryptoAssetsHistory) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CryptoAssetsHistory) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CryptoAssetsHistory) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CryptoAssetsHistory) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CryptoAssetsHistory) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CryptoAssetsHistory) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CryptoAssetsHistory) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CryptoAssetsHistory) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsHistoryAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCryptoAssetsHistoryHook registers your hook function for all future operations.
func AddCryptoAssetsHistoryHook(hookPoint boil.HookPoint, cryptoAssetsHistoryHook CryptoAssetsHistoryHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cryptoAssetsHistoryAfterSelectMu.Lock()
		cryptoAssetsHistoryAfterSelectHooks = append(cryptoAssetsHistoryAfterSelectHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cryptoAssetsHistoryBeforeInsertMu.Lock()
		cryptoAssetsHistoryBeforeInsertHooks = append(cryptoAssetsHistoryBeforeInsertHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cryptoAssetsHistoryAfterInsertMu.Lock()
		cryptoAssetsHistoryAfterInsertHooks = append(cryptoAssetsHistoryAfterInsertHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cryptoAssetsHistoryBeforeUpdateMu.Lock()
		cryptoAssetsHistoryBeforeUpdateHooks = append(cryptoAssetsHistoryBeforeUpdateHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cryptoAssetsHistoryAfterUpdateMu.Lock()
		cryptoAssetsHistoryAfterUpdateHooks = append(cryptoAssetsHistoryAfterUpdateHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cryptoAssetsHistoryBeforeDeleteMu.Lock()
		cryptoAssetsHistoryBeforeDeleteHooks = append(cryptoAssetsHistoryBeforeDeleteHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cryptoAssetsHistoryAfterDeleteMu.Lock()
		cryptoAssetsHistoryAfterDeleteHooks = append(cryptoAssetsHistoryAfterDeleteHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cryptoAssetsHistoryBeforeUpsertMu.Lock()
		cryptoAssetsHistoryBeforeUpsertHooks = append(cryptoAssetsHistoryBeforeUpsertHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cryptoAssetsHistoryAfterUpsertMu.Lock()
		cryptoAssetsHistoryAfterUpsertHooks = append(cryptoAssetsHistoryAfterUpsertHooks, cryptoAssetsHistoryHook)
		cryptoAssetsHistoryAfterUpsertMu.Unlock()
	}
}

// One returns a single cryptoAssetsHistory record from the query.
func (q cryptoAssetsHistoryQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CryptoAssetsHistory, error) {
	o := &CryptoAssetsHistory{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for crypto_assets_history")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CryptoAssetsHistory records from the query.
func (q cryptoAssetsHistoryQuery) All(ctx context.Context, exec boil.ContextExecutor) (CryptoAssetsHistorySlice, error) {
	var o []*CryptoAssetsHistory

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CryptoAssetsHistory slice")
	}

	if len(cryptoAssetsHistoryAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CryptoAssetsHistory records in the query.
func (q cryptoAssetsHistoryQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count crypto_assets_history rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cryptoAssetsHistoryQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if crypto_assets_history exists")
	}

	return count > 0, nil
}

// CryptoAssetsTotal pointed to by the foreign key.
func (o *CryptoAssetsHistory) CryptoAssetsTotal(mods ...qm.QueryMod) cryptoAssetsTotalQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.CryptoAssetsTotalID),
	}

	queryMods = append(queryMods, mods...)

	return CryptoAssetsTotals(queryMods...)
}

// User pointed to by the foreign key.
func (o *CryptoAssetsHistory) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadCryptoAssetsTotal allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cryptoAssetsHistoryL) LoadCryptoAssetsTotal(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCryptoAssetsHistory interface{}, mods queries.Applicator) error {
	var slice []*CryptoAssetsHistory
	var object *CryptoAssetsHistory

	if singular {
		var ok bool
		object, ok = maybeCryptoAssetsHistory.(*CryptoAssetsHistory)
		if !ok {
			object = new(CryptoAssetsHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCryptoAssetsHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCryptoAssetsHistory))
			}
		}
	} else {
		s, ok := maybeCryptoAssetsHistory.(*[]*CryptoAssetsHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCryptoAssetsHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCryptoAssetsHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cryptoAssetsHistoryR{}
		}
		if !queries.IsNil(object.CryptoAssetsTotalID) {
			args[object.CryptoAssetsTotalID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cryptoAssetsHistoryR{}
			}

			if !queries.IsNil(obj.CryptoAssetsTotalID) {
				args[obj.CryptoAssetsTotalID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`crypto_assets_total`),
		qm.WhereIn(`crypto_assets_total.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load CryptoAssetsTotal")
	}

	var resultSlice []*CryptoAssetsTotal
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice CryptoAssetsTotal")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for crypto_assets_total")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crypto_assets_total")
	}

	if len(cryptoAssetsTotalAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.CryptoAssetsTotal = foreign
		if foreign.R == nil {
			foreign.R = &cryptoAssetsTotalR{}
		}
		foreign.R.CryptoAssetsHistories = append(foreign.R.CryptoAssetsHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.CryptoAssetsTotalID, foreign.ID) {
				local.R.CryptoAssetsTotal = foreign
				if foreign.R == nil {
					foreign.R = &cryptoAssetsTotalR{}
				}
				foreign.R.CryptoAssetsHistories = append(foreign.R.CryptoAssetsHistories, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cryptoAssetsHistoryL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCryptoAssetsHistory interface{}, mods queries.Applicator) error {
	var slice []*CryptoAssetsHistory
	var object *CryptoAssetsHistory

	if singular {
		var ok bool
		object, ok = maybeCryptoAssetsHistory.(*CryptoAssetsHistory)
		if !ok {
			object = new(CryptoAssetsHistory)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCryptoAssetsHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCryptoAssetsHistory))
			}
		}
	} else {
		s, ok := maybeCryptoAssetsHistory.(*[]*CryptoAssetsHistory)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCryptoAssetsHistory)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCryptoAssetsHistory))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cryptoAssetsHistoryR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cryptoAssetsHistoryR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CryptoAssetsHistories = append(foreign.R.CryptoAssetsHistories, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CryptoAssetsHistories = append(foreign.R.CryptoAssetsHistories, local)
				break
			}
		}
	}

	return nil
}

// SetCryptoAssetsTotal of the cryptoAssetsHistory to the related item.
// Sets o.R.CryptoAssetsTotal to related.
// Adds o to related.R.CryptoAssetsHistories.
func (o *CryptoAssetsHistory) SetCryptoAssetsTotal(ctx context.Context, exec boil.ContextExecutor, insert bool, related *CryptoAssetsTotal) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crypto_assets_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"crypto_assets_total_id"}),
		strmangle.WhereClause("\"", "\"", 2, cryptoAssetsHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.CryptoAssetsTotalID, related.ID)
	if o.R == nil {
		o.R = &cryptoAssetsHistoryR{
			CryptoAssetsTotal: related,
		}
	} else {
		o.R.CryptoAssetsTotal = related
	}

	if related.R == nil {
		related.R = &cryptoAssetsTotalR{
			CryptoAssetsHistories: CryptoAssetsHistorySlice{o},
		}
	} else {
		related.R.CryptoAssetsHistories = append(related.R.CryptoAssetsHistories, o)
	}

	return nil
}

// RemoveCryptoAssetsTotal relationship.
// Sets o.R.CryptoAssetsTotal to nil.
// Removes o from all passed in related items' relationships struct.
func (o *CryptoAssetsHistory) RemoveCryptoAssetsTotal(ctx context.Context, exec boil.ContextExecutor, related *CryptoAssetsTotal) error {
	var err error

	queries.SetScanner(&o.CryptoAssetsTotalID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("crypto_assets_total_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.CryptoAssetsTotal = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.CryptoAssetsHistories {
		if queries.Equal(o.CryptoAssetsTotalID, ri.CryptoAssetsTotalID) {
			continue
		}

		ln := len(related.R.CryptoAssetsHistories)
		if ln > 1 && i < ln-1 {
			related.R.CryptoAssetsHistories[i] = related.R.CryptoAssetsHistories[ln-1]
		}
		related.R.CryptoAssetsHistories = related.R.CryptoAssetsHistories[:ln-1]
		break
	}
	return nil
}

// SetUser of the cryptoAssetsHistory to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CryptoAssetsHistories.
func (o *CryptoAssetsHistory) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crypto_assets_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, cryptoAssetsHistoryPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &cryptoAssetsHistoryR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CryptoAssetsHistories: CryptoAssetsHistorySlice{o},
		}
	} else {
		related.R.CryptoAssetsHistories = append(related.R.CryptoAssetsHistories, o)
	}

	return nil
}

// CryptoAssetsHistories retrieves all the records using an executor.
func CryptoAssetsHistories(mods ...qm.QueryMod) cryptoAssetsHistoryQuery {
	mods = append(mods, qm.From("\"crypto_assets_history\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"crypto_assets_history\".*"})
	}

	return cryptoAssetsHistoryQuery{q}
}

// FindCryptoAssetsHistory retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCryptoAssetsHistory(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CryptoAssetsHistory, error) {
	cryptoAssetsHistoryObj := &CryptoAssetsHistory{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"crypto_assets_history\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cryptoAssetsHistoryObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from crypto_assets_history")
	}

	if err = cryptoAssetsHistoryObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cryptoAssetsHistoryObj, err
	}

	return cryptoAssetsHistoryObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CryptoAssetsHistory) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no crypto_assets_history provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cryptoAssetsHistoryColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cryptoAssetsHistoryInsertCacheMut.RLock()
	cache, cached := cryptoAssetsHistoryInsertCache[key]
	cryptoAssetsHistoryInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cryptoAssetsHistoryAllColumns,
			cryptoAssetsHistoryColumnsWithDefault,
			cryptoAssetsHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cryptoAssetsHistoryType, cryptoAssetsHistoryMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cryptoAssetsHistoryType, cryptoAssetsHistoryMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"crypto_assets_history\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"crypto_assets_history\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into crypto_assets_history")
	}

	if !cached {
		cryptoAssetsHistoryInsertCacheMut.Lock()
		cryptoAssetsHistoryInsertCache[key] = cache
		cryptoAssetsHistoryInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CryptoAssetsHistory.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CryptoAssetsHistory) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cryptoAssetsHistoryUpdateCacheMut.RLock()
	cache, cached := cryptoAssetsHistoryUpdateCache[key]
	cryptoAssetsHistoryUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cryptoAssetsHistoryAllColumns,
			cryptoAssetsHistoryPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update crypto_assets_history, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"crypto_assets_history\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cryptoAssetsHistoryPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cryptoAssetsHistoryType, cryptoAssetsHistoryMapping, append(wl, cryptoAssetsHistoryPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update crypto_assets_history row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for crypto_assets_history")
	}

	if !cached {
		cryptoAssetsHistoryUpdateCacheMut.Lock()
		cryptoAssetsHistoryUpdateCache[key] = cache
		cryptoAssetsHistoryUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cryptoAssetsHistoryQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for crypto_assets_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for crypto_assets_history")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CryptoAssetsHistorySlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoAssetsHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"crypto_assets_history\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cryptoAssetsHistoryPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cryptoAssetsHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cryptoAssetsHistory")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CryptoAssetsHistory) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no crypto_assets_history provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cryptoAssetsHistoryColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cryptoAssetsHistoryUpsertCacheMut.RLock()
	cache, cached := cryptoAssetsHistoryUpsertCache[key]
	cryptoAssetsHistoryUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cryptoAssetsHistoryAllColumns,
			cryptoAssetsHistoryColumnsWithDefault,
			cryptoAssetsHistoryColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cryptoAssetsHistoryAllColumns,
			cryptoAssetsHistoryPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert crypto_assets_history, could not build update column list")
		}

		ret := strmangle.SetComplement(cryptoAssetsHistoryAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cryptoAssetsHistoryPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert crypto_assets_history, could not build conflict column list")
			}

			conflict = make([]string, len(cryptoAssetsHistoryPrimaryKeyColumns))
			copy(conflict, cryptoAssetsHistoryPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"crypto_assets_history\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cryptoAssetsHistoryType, cryptoAssetsHistoryMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cryptoAssetsHistoryType, cryptoAssetsHistoryMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert crypto_assets_history")
	}

	if !cached {
		cryptoAssetsHistoryUpsertCacheMut.Lock()
		cryptoAssetsHistoryUpsertCache[key] = cache
		cryptoAssetsHistoryUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CryptoAssetsHistory record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CryptoAssetsHistory) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CryptoAssetsHistory provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cryptoAssetsHistoryPrimaryKeyMapping)
	sql := "DELETE FROM \"crypto_assets_history\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from crypto_assets_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for crypto_assets_history")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cryptoAssetsHistoryQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cryptoAssetsHistoryQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from crypto_assets_history")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crypto_assets_history")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CryptoAssetsHistorySlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cryptoAssetsHistoryBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoAssetsHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"crypto_assets_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cryptoAssetsHistoryPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cryptoAssetsHistory slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crypto_assets_history")
	}

	if len(cryptoAssetsHistoryAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CryptoAssetsHistory) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCryptoAssetsHistory(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CryptoAssetsHistorySlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CryptoAssetsHistorySlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoAssetsHistoryPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"crypto_assets_history\".* FROM \"crypto_assets_history\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cryptoAssetsHistoryPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CryptoAssetsHistorySlice")
	}

	*o = slice

	return nil
}

// CryptoAssetsHistoryExists checks if the CryptoAssetsHistory row exists.
func CryptoAssetsHistoryExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"crypto_assets_history\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if crypto_assets_history exists")
	}

	return exists, nil
}

// Exists checks if the CryptoAssetsHistory row exists.
func (o *CryptoAssetsHistory) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CryptoAssetsHistoryExists(ctx, exec, o.ID)
}
