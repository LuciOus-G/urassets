// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CurrentMonthBill is an object representing the database table.
type CurrentMonthBill struct {
	// Auto Generate UUID V4
	ID          string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	BankUserID  string        `boil:"bank_user_id" json:"bank_user_id" toml:"bank_user_id" yaml:"bank_user_id"`
	UserID      string        `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Amount      types.Decimal `boil:"amount" json:"amount" toml:"amount" yaml:"amount"`
	PeriodMonth time.Time     `boil:"period_month" json:"period_month" toml:"period_month" yaml:"period_month"`
	IsPayed     null.Bool     `boil:"is_payed" json:"is_payed,omitempty" toml:"is_payed" yaml:"is_payed,omitempty"`
	Name        string        `boil:"name" json:"name" toml:"name" yaml:"name"`

	R *currentMonthBillR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currentMonthBillL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrentMonthBillColumns = struct {
	ID          string
	BankUserID  string
	UserID      string
	Amount      string
	PeriodMonth string
	IsPayed     string
	Name        string
}{
	ID:          "id",
	BankUserID:  "bank_user_id",
	UserID:      "user_id",
	Amount:      "amount",
	PeriodMonth: "period_month",
	IsPayed:     "is_payed",
	Name:        "name",
}

var CurrentMonthBillTableColumns = struct {
	ID          string
	BankUserID  string
	UserID      string
	Amount      string
	PeriodMonth string
	IsPayed     string
	Name        string
}{
	ID:          "current_month_bills.id",
	BankUserID:  "current_month_bills.bank_user_id",
	UserID:      "current_month_bills.user_id",
	Amount:      "current_month_bills.amount",
	PeriodMonth: "current_month_bills.period_month",
	IsPayed:     "current_month_bills.is_payed",
	Name:        "current_month_bills.name",
}

// Generated where

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var CurrentMonthBillWhere = struct {
	ID          whereHelperstring
	BankUserID  whereHelperstring
	UserID      whereHelperstring
	Amount      whereHelpertypes_Decimal
	PeriodMonth whereHelpertime_Time
	IsPayed     whereHelpernull_Bool
	Name        whereHelperstring
}{
	ID:          whereHelperstring{field: "\"current_month_bills\".\"id\""},
	BankUserID:  whereHelperstring{field: "\"current_month_bills\".\"bank_user_id\""},
	UserID:      whereHelperstring{field: "\"current_month_bills\".\"user_id\""},
	Amount:      whereHelpertypes_Decimal{field: "\"current_month_bills\".\"amount\""},
	PeriodMonth: whereHelpertime_Time{field: "\"current_month_bills\".\"period_month\""},
	IsPayed:     whereHelpernull_Bool{field: "\"current_month_bills\".\"is_payed\""},
	Name:        whereHelperstring{field: "\"current_month_bills\".\"name\""},
}

// CurrentMonthBillRels is where relationship names are stored.
var CurrentMonthBillRels = struct {
	BankUser string
	User     string
}{
	BankUser: "BankUser",
	User:     "User",
}

// currentMonthBillR is where relationships are stored.
type currentMonthBillR struct {
	BankUser *UserBank `boil:"BankUser" json:"BankUser" toml:"BankUser" yaml:"BankUser"`
	User     *User     `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*currentMonthBillR) NewStruct() *currentMonthBillR {
	return &currentMonthBillR{}
}

func (r *currentMonthBillR) GetBankUser() *UserBank {
	if r == nil {
		return nil
	}
	return r.BankUser
}

func (r *currentMonthBillR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// currentMonthBillL is where Load methods for each relationship are stored.
type currentMonthBillL struct{}

var (
	currentMonthBillAllColumns            = []string{"id", "bank_user_id", "user_id", "amount", "period_month", "is_payed", "name"}
	currentMonthBillColumnsWithoutDefault = []string{"bank_user_id", "user_id", "amount", "period_month", "name"}
	currentMonthBillColumnsWithDefault    = []string{"id", "is_payed"}
	currentMonthBillPrimaryKeyColumns     = []string{"id"}
	currentMonthBillGeneratedColumns      = []string{}
)

type (
	// CurrentMonthBillSlice is an alias for a slice of pointers to CurrentMonthBill.
	// This should almost always be used instead of []CurrentMonthBill.
	CurrentMonthBillSlice []*CurrentMonthBill
	// CurrentMonthBillHook is the signature for custom CurrentMonthBill hook methods
	CurrentMonthBillHook func(context.Context, boil.ContextExecutor, *CurrentMonthBill) error

	currentMonthBillQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentMonthBillType                 = reflect.TypeOf(&CurrentMonthBill{})
	currentMonthBillMapping              = queries.MakeStructMapping(currentMonthBillType)
	currentMonthBillPrimaryKeyMapping, _ = queries.BindMapping(currentMonthBillType, currentMonthBillMapping, currentMonthBillPrimaryKeyColumns)
	currentMonthBillInsertCacheMut       sync.RWMutex
	currentMonthBillInsertCache          = make(map[string]insertCache)
	currentMonthBillUpdateCacheMut       sync.RWMutex
	currentMonthBillUpdateCache          = make(map[string]updateCache)
	currentMonthBillUpsertCacheMut       sync.RWMutex
	currentMonthBillUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currentMonthBillAfterSelectMu sync.Mutex
var currentMonthBillAfterSelectHooks []CurrentMonthBillHook

var currentMonthBillBeforeInsertMu sync.Mutex
var currentMonthBillBeforeInsertHooks []CurrentMonthBillHook
var currentMonthBillAfterInsertMu sync.Mutex
var currentMonthBillAfterInsertHooks []CurrentMonthBillHook

var currentMonthBillBeforeUpdateMu sync.Mutex
var currentMonthBillBeforeUpdateHooks []CurrentMonthBillHook
var currentMonthBillAfterUpdateMu sync.Mutex
var currentMonthBillAfterUpdateHooks []CurrentMonthBillHook

var currentMonthBillBeforeDeleteMu sync.Mutex
var currentMonthBillBeforeDeleteHooks []CurrentMonthBillHook
var currentMonthBillAfterDeleteMu sync.Mutex
var currentMonthBillAfterDeleteHooks []CurrentMonthBillHook

var currentMonthBillBeforeUpsertMu sync.Mutex
var currentMonthBillBeforeUpsertHooks []CurrentMonthBillHook
var currentMonthBillAfterUpsertMu sync.Mutex
var currentMonthBillAfterUpsertHooks []CurrentMonthBillHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentMonthBill) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrentMonthBill) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrentMonthBill) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrentMonthBill) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrentMonthBill) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrentMonthBill) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrentMonthBill) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrentMonthBill) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrentMonthBill) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBillAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentMonthBillHook registers your hook function for all future operations.
func AddCurrentMonthBillHook(hookPoint boil.HookPoint, currentMonthBillHook CurrentMonthBillHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		currentMonthBillAfterSelectMu.Lock()
		currentMonthBillAfterSelectHooks = append(currentMonthBillAfterSelectHooks, currentMonthBillHook)
		currentMonthBillAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		currentMonthBillBeforeInsertMu.Lock()
		currentMonthBillBeforeInsertHooks = append(currentMonthBillBeforeInsertHooks, currentMonthBillHook)
		currentMonthBillBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		currentMonthBillAfterInsertMu.Lock()
		currentMonthBillAfterInsertHooks = append(currentMonthBillAfterInsertHooks, currentMonthBillHook)
		currentMonthBillAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		currentMonthBillBeforeUpdateMu.Lock()
		currentMonthBillBeforeUpdateHooks = append(currentMonthBillBeforeUpdateHooks, currentMonthBillHook)
		currentMonthBillBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		currentMonthBillAfterUpdateMu.Lock()
		currentMonthBillAfterUpdateHooks = append(currentMonthBillAfterUpdateHooks, currentMonthBillHook)
		currentMonthBillAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		currentMonthBillBeforeDeleteMu.Lock()
		currentMonthBillBeforeDeleteHooks = append(currentMonthBillBeforeDeleteHooks, currentMonthBillHook)
		currentMonthBillBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		currentMonthBillAfterDeleteMu.Lock()
		currentMonthBillAfterDeleteHooks = append(currentMonthBillAfterDeleteHooks, currentMonthBillHook)
		currentMonthBillAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		currentMonthBillBeforeUpsertMu.Lock()
		currentMonthBillBeforeUpsertHooks = append(currentMonthBillBeforeUpsertHooks, currentMonthBillHook)
		currentMonthBillBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		currentMonthBillAfterUpsertMu.Lock()
		currentMonthBillAfterUpsertHooks = append(currentMonthBillAfterUpsertHooks, currentMonthBillHook)
		currentMonthBillAfterUpsertMu.Unlock()
	}
}

// One returns a single currentMonthBill record from the query.
func (q currentMonthBillQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrentMonthBill, error) {
	o := &CurrentMonthBill{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for current_month_bills")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentMonthBill records from the query.
func (q currentMonthBillQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrentMonthBillSlice, error) {
	var o []*CurrentMonthBill

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrentMonthBill slice")
	}

	if len(currentMonthBillAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentMonthBill records in the query.
func (q currentMonthBillQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count current_month_bills rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentMonthBillQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if current_month_bills exists")
	}

	return count > 0, nil
}

// BankUser pointed to by the foreign key.
func (o *CurrentMonthBill) BankUser(mods ...qm.QueryMod) userBankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BankUserID),
	}

	queryMods = append(queryMods, mods...)

	return UserBanks(queryMods...)
}

// User pointed to by the foreign key.
func (o *CurrentMonthBill) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadBankUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentMonthBillL) LoadBankUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrentMonthBill interface{}, mods queries.Applicator) error {
	var slice []*CurrentMonthBill
	var object *CurrentMonthBill

	if singular {
		var ok bool
		object, ok = maybeCurrentMonthBill.(*CurrentMonthBill)
		if !ok {
			object = new(CurrentMonthBill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurrentMonthBill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurrentMonthBill))
			}
		}
	} else {
		s, ok := maybeCurrentMonthBill.(*[]*CurrentMonthBill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurrentMonthBill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurrentMonthBill))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &currentMonthBillR{}
		}
		args[object.BankUserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentMonthBillR{}
			}

			args[obj.BankUserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_banks`),
		qm.WhereIn(`user_banks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBank")
	}

	var resultSlice []*UserBank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_banks")
	}

	if len(userBankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BankUser = foreign
		if foreign.R == nil {
			foreign.R = &userBankR{}
		}
		foreign.R.BankUserCurrentMonthBills = append(foreign.R.BankUserCurrentMonthBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankUserID == foreign.ID {
				local.R.BankUser = foreign
				if foreign.R == nil {
					foreign.R = &userBankR{}
				}
				foreign.R.BankUserCurrentMonthBills = append(foreign.R.BankUserCurrentMonthBills, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentMonthBillL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrentMonthBill interface{}, mods queries.Applicator) error {
	var slice []*CurrentMonthBill
	var object *CurrentMonthBill

	if singular {
		var ok bool
		object, ok = maybeCurrentMonthBill.(*CurrentMonthBill)
		if !ok {
			object = new(CurrentMonthBill)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurrentMonthBill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurrentMonthBill))
			}
		}
	} else {
		s, ok := maybeCurrentMonthBill.(*[]*CurrentMonthBill)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurrentMonthBill)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurrentMonthBill))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &currentMonthBillR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentMonthBillR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CurrentMonthBills = append(foreign.R.CurrentMonthBills, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CurrentMonthBills = append(foreign.R.CurrentMonthBills, local)
				break
			}
		}
	}

	return nil
}

// SetBankUser of the currentMonthBill to the related item.
// Sets o.R.BankUser to related.
// Adds o to related.R.BankUserCurrentMonthBills.
func (o *CurrentMonthBill) SetBankUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_month_bills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"bank_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentMonthBillPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankUserID = related.ID
	if o.R == nil {
		o.R = &currentMonthBillR{
			BankUser: related,
		}
	} else {
		o.R.BankUser = related
	}

	if related.R == nil {
		related.R = &userBankR{
			BankUserCurrentMonthBills: CurrentMonthBillSlice{o},
		}
	} else {
		related.R.BankUserCurrentMonthBills = append(related.R.BankUserCurrentMonthBills, o)
	}

	return nil
}

// SetUser of the currentMonthBill to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CurrentMonthBills.
func (o *CurrentMonthBill) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_month_bills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentMonthBillPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &currentMonthBillR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CurrentMonthBills: CurrentMonthBillSlice{o},
		}
	} else {
		related.R.CurrentMonthBills = append(related.R.CurrentMonthBills, o)
	}

	return nil
}

// CurrentMonthBills retrieves all the records using an executor.
func CurrentMonthBills(mods ...qm.QueryMod) currentMonthBillQuery {
	mods = append(mods, qm.From("\"current_month_bills\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"current_month_bills\".*"})
	}

	return currentMonthBillQuery{q}
}

// FindCurrentMonthBill retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrentMonthBill(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CurrentMonthBill, error) {
	currentMonthBillObj := &CurrentMonthBill{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"current_month_bills\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, currentMonthBillObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from current_month_bills")
	}

	if err = currentMonthBillObj.doAfterSelectHooks(ctx, exec); err != nil {
		return currentMonthBillObj, err
	}

	return currentMonthBillObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrentMonthBill) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_month_bills provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentMonthBillColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currentMonthBillInsertCacheMut.RLock()
	cache, cached := currentMonthBillInsertCache[key]
	currentMonthBillInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currentMonthBillAllColumns,
			currentMonthBillColumnsWithDefault,
			currentMonthBillColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currentMonthBillType, currentMonthBillMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currentMonthBillType, currentMonthBillMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"current_month_bills\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"current_month_bills\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into current_month_bills")
	}

	if !cached {
		currentMonthBillInsertCacheMut.Lock()
		currentMonthBillInsertCache[key] = cache
		currentMonthBillInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurrentMonthBill.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrentMonthBill) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currentMonthBillUpdateCacheMut.RLock()
	cache, cached := currentMonthBillUpdateCache[key]
	currentMonthBillUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currentMonthBillAllColumns,
			currentMonthBillPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update current_month_bills, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"current_month_bills\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currentMonthBillPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currentMonthBillType, currentMonthBillMapping, append(wl, currentMonthBillPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update current_month_bills row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for current_month_bills")
	}

	if !cached {
		currentMonthBillUpdateCacheMut.Lock()
		currentMonthBillUpdateCache[key] = cache
		currentMonthBillUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currentMonthBillQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for current_month_bills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for current_month_bills")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrentMonthBillSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"current_month_bills\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currentMonthBillPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currentMonthBill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currentMonthBill")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrentMonthBill) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no current_month_bills provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentMonthBillColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currentMonthBillUpsertCacheMut.RLock()
	cache, cached := currentMonthBillUpsertCache[key]
	currentMonthBillUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			currentMonthBillAllColumns,
			currentMonthBillColumnsWithDefault,
			currentMonthBillColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			currentMonthBillAllColumns,
			currentMonthBillPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert current_month_bills, could not build update column list")
		}

		ret := strmangle.SetComplement(currentMonthBillAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(currentMonthBillPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert current_month_bills, could not build conflict column list")
			}

			conflict = make([]string, len(currentMonthBillPrimaryKeyColumns))
			copy(conflict, currentMonthBillPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"current_month_bills\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(currentMonthBillType, currentMonthBillMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currentMonthBillType, currentMonthBillMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert current_month_bills")
	}

	if !cached {
		currentMonthBillUpsertCacheMut.Lock()
		currentMonthBillUpsertCache[key] = cache
		currentMonthBillUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurrentMonthBill record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrentMonthBill) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentMonthBill provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currentMonthBillPrimaryKeyMapping)
	sql := "DELETE FROM \"current_month_bills\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from current_month_bills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for current_month_bills")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currentMonthBillQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currentMonthBillQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from current_month_bills")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_month_bills")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrentMonthBillSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(currentMonthBillBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"current_month_bills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentMonthBillPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currentMonthBill slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_month_bills")
	}

	if len(currentMonthBillAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrentMonthBill) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrentMonthBill(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrentMonthBillSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrentMonthBillSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthBillPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"current_month_bills\".* FROM \"current_month_bills\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentMonthBillPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrentMonthBillSlice")
	}

	*o = slice

	return nil
}

// CurrentMonthBillExists checks if the CurrentMonthBill row exists.
func CurrentMonthBillExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"current_month_bills\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if current_month_bills exists")
	}

	return exists, nil
}

// Exists checks if the CurrentMonthBill row exists.
func (o *CurrentMonthBill) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CurrentMonthBillExists(ctx, exec, o.ID)
}
