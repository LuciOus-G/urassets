// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testGooseMigrations(t *testing.T) {
	t.Parallel()

	query := GooseMigrations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testGooseMigrationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooseMigrationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := GooseMigrations().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooseMigrationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooseMigrationSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testGooseMigrationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := GooseMigrationExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if GooseMigration exists: %s", err)
	}
	if !e {
		t.Errorf("Expected GooseMigrationExists to return true, but got false.")
	}
}

func testGooseMigrationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	gooseMigrationFound, err := FindGooseMigration(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if gooseMigrationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testGooseMigrationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = GooseMigrations().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testGooseMigrationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := GooseMigrations().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testGooseMigrationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	gooseMigrationOne := &GooseMigration{}
	gooseMigrationTwo := &GooseMigration{}
	if err = randomize.Struct(seed, gooseMigrationOne, gooseMigrationDBTypes, false, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, gooseMigrationTwo, gooseMigrationDBTypes, false, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gooseMigrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gooseMigrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooseMigrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testGooseMigrationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	gooseMigrationOne := &GooseMigration{}
	gooseMigrationTwo := &GooseMigration{}
	if err = randomize.Struct(seed, gooseMigrationOne, gooseMigrationDBTypes, false, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}
	if err = randomize.Struct(seed, gooseMigrationTwo, gooseMigrationDBTypes, false, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = gooseMigrationOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = gooseMigrationTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func gooseMigrationBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func gooseMigrationAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *GooseMigration) error {
	*o = GooseMigration{}
	return nil
}

func testGooseMigrationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &GooseMigration{}
	o := &GooseMigration{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize GooseMigration object: %s", err)
	}

	AddGooseMigrationHook(boil.BeforeInsertHook, gooseMigrationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	gooseMigrationBeforeInsertHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.AfterInsertHook, gooseMigrationAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	gooseMigrationAfterInsertHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.AfterSelectHook, gooseMigrationAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	gooseMigrationAfterSelectHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.BeforeUpdateHook, gooseMigrationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	gooseMigrationBeforeUpdateHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.AfterUpdateHook, gooseMigrationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	gooseMigrationAfterUpdateHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.BeforeDeleteHook, gooseMigrationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	gooseMigrationBeforeDeleteHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.AfterDeleteHook, gooseMigrationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	gooseMigrationAfterDeleteHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.BeforeUpsertHook, gooseMigrationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	gooseMigrationBeforeUpsertHooks = []GooseMigrationHook{}

	AddGooseMigrationHook(boil.AfterUpsertHook, gooseMigrationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	gooseMigrationAfterUpsertHooks = []GooseMigrationHook{}
}

func testGooseMigrationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooseMigrationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(gooseMigrationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testGooseMigrationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooseMigrationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := GooseMigrationSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testGooseMigrationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := GooseMigrations().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	gooseMigrationDBTypes = map[string]string{`ID`: `integer`, `VersionID`: `bigint`, `IsApplied`: `boolean`, `Tstamp`: `timestamp without time zone`}
	_                     = bytes.MinRead
)

func testGooseMigrationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(gooseMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(gooseMigrationAllColumns) == len(gooseMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testGooseMigrationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(gooseMigrationAllColumns) == len(gooseMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &GooseMigration{}
	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, gooseMigrationDBTypes, true, gooseMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(gooseMigrationAllColumns, gooseMigrationPrimaryKeyColumns) {
		fields = gooseMigrationAllColumns
	} else {
		fields = strmangle.SetComplement(
			gooseMigrationAllColumns,
			gooseMigrationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := GooseMigrationSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testGooseMigrationsUpsert(t *testing.T) {
	t.Parallel()

	if len(gooseMigrationAllColumns) == len(gooseMigrationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := GooseMigration{}
	if err = randomize.Struct(seed, &o, gooseMigrationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooseMigration: %s", err)
	}

	count, err := GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, gooseMigrationDBTypes, false, gooseMigrationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize GooseMigration struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert GooseMigration: %s", err)
	}

	count, err = GooseMigrations().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
