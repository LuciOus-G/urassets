// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CurrentMonthBalance is an object representing the database table.
type CurrentMonthBalance struct {
	// Auto Generate UUID V4
	ID             string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	BankUsersID    string        `boil:"bank_users_id" json:"bank_users_id" toml:"bank_users_id" yaml:"bank_users_id"`
	Balance        types.Decimal `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`
	PeriodMonth    null.Time     `boil:"period_month" json:"period_month,omitempty" toml:"period_month" yaml:"period_month,omitempty"`
	IsFirstBalance null.Bool     `boil:"is_first_balance" json:"is_first_balance,omitempty" toml:"is_first_balance" yaml:"is_first_balance,omitempty"`

	R *currentMonthBalanceR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L currentMonthBalanceL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CurrentMonthBalanceColumns = struct {
	ID             string
	BankUsersID    string
	Balance        string
	PeriodMonth    string
	IsFirstBalance string
}{
	ID:             "id",
	BankUsersID:    "bank_users_id",
	Balance:        "balance",
	PeriodMonth:    "period_month",
	IsFirstBalance: "is_first_balance",
}

var CurrentMonthBalanceTableColumns = struct {
	ID             string
	BankUsersID    string
	Balance        string
	PeriodMonth    string
	IsFirstBalance string
}{
	ID:             "current_month_balance.id",
	BankUsersID:    "current_month_balance.bank_users_id",
	Balance:        "current_month_balance.balance",
	PeriodMonth:    "current_month_balance.period_month",
	IsFirstBalance: "current_month_balance.is_first_balance",
}

// Generated where

var CurrentMonthBalanceWhere = struct {
	ID             whereHelperstring
	BankUsersID    whereHelperstring
	Balance        whereHelpertypes_Decimal
	PeriodMonth    whereHelpernull_Time
	IsFirstBalance whereHelpernull_Bool
}{
	ID:             whereHelperstring{field: "\"current_month_balance\".\"id\""},
	BankUsersID:    whereHelperstring{field: "\"current_month_balance\".\"bank_users_id\""},
	Balance:        whereHelpertypes_Decimal{field: "\"current_month_balance\".\"balance\""},
	PeriodMonth:    whereHelpernull_Time{field: "\"current_month_balance\".\"period_month\""},
	IsFirstBalance: whereHelpernull_Bool{field: "\"current_month_balance\".\"is_first_balance\""},
}

// CurrentMonthBalanceRels is where relationship names are stored.
var CurrentMonthBalanceRels = struct {
	BankUser string
}{
	BankUser: "BankUser",
}

// currentMonthBalanceR is where relationships are stored.
type currentMonthBalanceR struct {
	BankUser *UserBank `boil:"BankUser" json:"BankUser" toml:"BankUser" yaml:"BankUser"`
}

// NewStruct creates a new relationship struct
func (*currentMonthBalanceR) NewStruct() *currentMonthBalanceR {
	return &currentMonthBalanceR{}
}

func (r *currentMonthBalanceR) GetBankUser() *UserBank {
	if r == nil {
		return nil
	}
	return r.BankUser
}

// currentMonthBalanceL is where Load methods for each relationship are stored.
type currentMonthBalanceL struct{}

var (
	currentMonthBalanceAllColumns            = []string{"id", "bank_users_id", "balance", "period_month", "is_first_balance"}
	currentMonthBalanceColumnsWithoutDefault = []string{"bank_users_id", "balance"}
	currentMonthBalanceColumnsWithDefault    = []string{"id", "period_month", "is_first_balance"}
	currentMonthBalancePrimaryKeyColumns     = []string{"id"}
	currentMonthBalanceGeneratedColumns      = []string{}
)

type (
	// CurrentMonthBalanceSlice is an alias for a slice of pointers to CurrentMonthBalance.
	// This should almost always be used instead of []CurrentMonthBalance.
	CurrentMonthBalanceSlice []*CurrentMonthBalance
	// CurrentMonthBalanceHook is the signature for custom CurrentMonthBalance hook methods
	CurrentMonthBalanceHook func(context.Context, boil.ContextExecutor, *CurrentMonthBalance) error

	currentMonthBalanceQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	currentMonthBalanceType                 = reflect.TypeOf(&CurrentMonthBalance{})
	currentMonthBalanceMapping              = queries.MakeStructMapping(currentMonthBalanceType)
	currentMonthBalancePrimaryKeyMapping, _ = queries.BindMapping(currentMonthBalanceType, currentMonthBalanceMapping, currentMonthBalancePrimaryKeyColumns)
	currentMonthBalanceInsertCacheMut       sync.RWMutex
	currentMonthBalanceInsertCache          = make(map[string]insertCache)
	currentMonthBalanceUpdateCacheMut       sync.RWMutex
	currentMonthBalanceUpdateCache          = make(map[string]updateCache)
	currentMonthBalanceUpsertCacheMut       sync.RWMutex
	currentMonthBalanceUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var currentMonthBalanceAfterSelectMu sync.Mutex
var currentMonthBalanceAfterSelectHooks []CurrentMonthBalanceHook

var currentMonthBalanceBeforeInsertMu sync.Mutex
var currentMonthBalanceBeforeInsertHooks []CurrentMonthBalanceHook
var currentMonthBalanceAfterInsertMu sync.Mutex
var currentMonthBalanceAfterInsertHooks []CurrentMonthBalanceHook

var currentMonthBalanceBeforeUpdateMu sync.Mutex
var currentMonthBalanceBeforeUpdateHooks []CurrentMonthBalanceHook
var currentMonthBalanceAfterUpdateMu sync.Mutex
var currentMonthBalanceAfterUpdateHooks []CurrentMonthBalanceHook

var currentMonthBalanceBeforeDeleteMu sync.Mutex
var currentMonthBalanceBeforeDeleteHooks []CurrentMonthBalanceHook
var currentMonthBalanceAfterDeleteMu sync.Mutex
var currentMonthBalanceAfterDeleteHooks []CurrentMonthBalanceHook

var currentMonthBalanceBeforeUpsertMu sync.Mutex
var currentMonthBalanceBeforeUpsertHooks []CurrentMonthBalanceHook
var currentMonthBalanceAfterUpsertMu sync.Mutex
var currentMonthBalanceAfterUpsertHooks []CurrentMonthBalanceHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CurrentMonthBalance) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CurrentMonthBalance) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CurrentMonthBalance) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CurrentMonthBalance) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CurrentMonthBalance) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CurrentMonthBalance) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CurrentMonthBalance) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CurrentMonthBalance) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CurrentMonthBalance) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range currentMonthBalanceAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCurrentMonthBalanceHook registers your hook function for all future operations.
func AddCurrentMonthBalanceHook(hookPoint boil.HookPoint, currentMonthBalanceHook CurrentMonthBalanceHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		currentMonthBalanceAfterSelectMu.Lock()
		currentMonthBalanceAfterSelectHooks = append(currentMonthBalanceAfterSelectHooks, currentMonthBalanceHook)
		currentMonthBalanceAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		currentMonthBalanceBeforeInsertMu.Lock()
		currentMonthBalanceBeforeInsertHooks = append(currentMonthBalanceBeforeInsertHooks, currentMonthBalanceHook)
		currentMonthBalanceBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		currentMonthBalanceAfterInsertMu.Lock()
		currentMonthBalanceAfterInsertHooks = append(currentMonthBalanceAfterInsertHooks, currentMonthBalanceHook)
		currentMonthBalanceAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		currentMonthBalanceBeforeUpdateMu.Lock()
		currentMonthBalanceBeforeUpdateHooks = append(currentMonthBalanceBeforeUpdateHooks, currentMonthBalanceHook)
		currentMonthBalanceBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		currentMonthBalanceAfterUpdateMu.Lock()
		currentMonthBalanceAfterUpdateHooks = append(currentMonthBalanceAfterUpdateHooks, currentMonthBalanceHook)
		currentMonthBalanceAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		currentMonthBalanceBeforeDeleteMu.Lock()
		currentMonthBalanceBeforeDeleteHooks = append(currentMonthBalanceBeforeDeleteHooks, currentMonthBalanceHook)
		currentMonthBalanceBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		currentMonthBalanceAfterDeleteMu.Lock()
		currentMonthBalanceAfterDeleteHooks = append(currentMonthBalanceAfterDeleteHooks, currentMonthBalanceHook)
		currentMonthBalanceAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		currentMonthBalanceBeforeUpsertMu.Lock()
		currentMonthBalanceBeforeUpsertHooks = append(currentMonthBalanceBeforeUpsertHooks, currentMonthBalanceHook)
		currentMonthBalanceBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		currentMonthBalanceAfterUpsertMu.Lock()
		currentMonthBalanceAfterUpsertHooks = append(currentMonthBalanceAfterUpsertHooks, currentMonthBalanceHook)
		currentMonthBalanceAfterUpsertMu.Unlock()
	}
}

// One returns a single currentMonthBalance record from the query.
func (q currentMonthBalanceQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CurrentMonthBalance, error) {
	o := &CurrentMonthBalance{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for current_month_balance")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CurrentMonthBalance records from the query.
func (q currentMonthBalanceQuery) All(ctx context.Context, exec boil.ContextExecutor) (CurrentMonthBalanceSlice, error) {
	var o []*CurrentMonthBalance

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CurrentMonthBalance slice")
	}

	if len(currentMonthBalanceAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CurrentMonthBalance records in the query.
func (q currentMonthBalanceQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count current_month_balance rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q currentMonthBalanceQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if current_month_balance exists")
	}

	return count > 0, nil
}

// BankUser pointed to by the foreign key.
func (o *CurrentMonthBalance) BankUser(mods ...qm.QueryMod) userBankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BankUsersID),
	}

	queryMods = append(queryMods, mods...)

	return UserBanks(queryMods...)
}

// LoadBankUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (currentMonthBalanceL) LoadBankUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCurrentMonthBalance interface{}, mods queries.Applicator) error {
	var slice []*CurrentMonthBalance
	var object *CurrentMonthBalance

	if singular {
		var ok bool
		object, ok = maybeCurrentMonthBalance.(*CurrentMonthBalance)
		if !ok {
			object = new(CurrentMonthBalance)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCurrentMonthBalance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCurrentMonthBalance))
			}
		}
	} else {
		s, ok := maybeCurrentMonthBalance.(*[]*CurrentMonthBalance)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCurrentMonthBalance)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCurrentMonthBalance))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &currentMonthBalanceR{}
		}
		args[object.BankUsersID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &currentMonthBalanceR{}
			}

			args[obj.BankUsersID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`user_banks`),
		qm.WhereIn(`user_banks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load UserBank")
	}

	var resultSlice []*UserBank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice UserBank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for user_banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for user_banks")
	}

	if len(userBankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.BankUser = foreign
		if foreign.R == nil {
			foreign.R = &userBankR{}
		}
		foreign.R.BankUserCurrentMonthBalances = append(foreign.R.BankUserCurrentMonthBalances, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankUsersID == foreign.ID {
				local.R.BankUser = foreign
				if foreign.R == nil {
					foreign.R = &userBankR{}
				}
				foreign.R.BankUserCurrentMonthBalances = append(foreign.R.BankUserCurrentMonthBalances, local)
				break
			}
		}
	}

	return nil
}

// SetBankUser of the currentMonthBalance to the related item.
// Sets o.R.BankUser to related.
// Adds o to related.R.BankUserCurrentMonthBalances.
func (o *CurrentMonthBalance) SetBankUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *UserBank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"current_month_balance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"bank_users_id"}),
		strmangle.WhereClause("\"", "\"", 2, currentMonthBalancePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankUsersID = related.ID
	if o.R == nil {
		o.R = &currentMonthBalanceR{
			BankUser: related,
		}
	} else {
		o.R.BankUser = related
	}

	if related.R == nil {
		related.R = &userBankR{
			BankUserCurrentMonthBalances: CurrentMonthBalanceSlice{o},
		}
	} else {
		related.R.BankUserCurrentMonthBalances = append(related.R.BankUserCurrentMonthBalances, o)
	}

	return nil
}

// CurrentMonthBalances retrieves all the records using an executor.
func CurrentMonthBalances(mods ...qm.QueryMod) currentMonthBalanceQuery {
	mods = append(mods, qm.From("\"current_month_balance\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"current_month_balance\".*"})
	}

	return currentMonthBalanceQuery{q}
}

// FindCurrentMonthBalance retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCurrentMonthBalance(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CurrentMonthBalance, error) {
	currentMonthBalanceObj := &CurrentMonthBalance{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"current_month_balance\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, currentMonthBalanceObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from current_month_balance")
	}

	if err = currentMonthBalanceObj.doAfterSelectHooks(ctx, exec); err != nil {
		return currentMonthBalanceObj, err
	}

	return currentMonthBalanceObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CurrentMonthBalance) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no current_month_balance provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentMonthBalanceColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	currentMonthBalanceInsertCacheMut.RLock()
	cache, cached := currentMonthBalanceInsertCache[key]
	currentMonthBalanceInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			currentMonthBalanceAllColumns,
			currentMonthBalanceColumnsWithDefault,
			currentMonthBalanceColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(currentMonthBalanceType, currentMonthBalanceMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(currentMonthBalanceType, currentMonthBalanceMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"current_month_balance\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"current_month_balance\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into current_month_balance")
	}

	if !cached {
		currentMonthBalanceInsertCacheMut.Lock()
		currentMonthBalanceInsertCache[key] = cache
		currentMonthBalanceInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CurrentMonthBalance.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CurrentMonthBalance) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	currentMonthBalanceUpdateCacheMut.RLock()
	cache, cached := currentMonthBalanceUpdateCache[key]
	currentMonthBalanceUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			currentMonthBalanceAllColumns,
			currentMonthBalancePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update current_month_balance, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"current_month_balance\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, currentMonthBalancePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(currentMonthBalanceType, currentMonthBalanceMapping, append(wl, currentMonthBalancePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update current_month_balance row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for current_month_balance")
	}

	if !cached {
		currentMonthBalanceUpdateCacheMut.Lock()
		currentMonthBalanceUpdateCache[key] = cache
		currentMonthBalanceUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q currentMonthBalanceQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for current_month_balance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for current_month_balance")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CurrentMonthBalanceSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthBalancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"current_month_balance\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, currentMonthBalancePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in currentMonthBalance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all currentMonthBalance")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CurrentMonthBalance) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no current_month_balance provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(currentMonthBalanceColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	currentMonthBalanceUpsertCacheMut.RLock()
	cache, cached := currentMonthBalanceUpsertCache[key]
	currentMonthBalanceUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			currentMonthBalanceAllColumns,
			currentMonthBalanceColumnsWithDefault,
			currentMonthBalanceColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			currentMonthBalanceAllColumns,
			currentMonthBalancePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert current_month_balance, could not build update column list")
		}

		ret := strmangle.SetComplement(currentMonthBalanceAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(currentMonthBalancePrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert current_month_balance, could not build conflict column list")
			}

			conflict = make([]string, len(currentMonthBalancePrimaryKeyColumns))
			copy(conflict, currentMonthBalancePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"current_month_balance\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(currentMonthBalanceType, currentMonthBalanceMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(currentMonthBalanceType, currentMonthBalanceMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert current_month_balance")
	}

	if !cached {
		currentMonthBalanceUpsertCacheMut.Lock()
		currentMonthBalanceUpsertCache[key] = cache
		currentMonthBalanceUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CurrentMonthBalance record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CurrentMonthBalance) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CurrentMonthBalance provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), currentMonthBalancePrimaryKeyMapping)
	sql := "DELETE FROM \"current_month_balance\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from current_month_balance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for current_month_balance")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q currentMonthBalanceQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no currentMonthBalanceQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from current_month_balance")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_month_balance")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CurrentMonthBalanceSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(currentMonthBalanceBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthBalancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"current_month_balance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentMonthBalancePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from currentMonthBalance slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for current_month_balance")
	}

	if len(currentMonthBalanceAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CurrentMonthBalance) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCurrentMonthBalance(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CurrentMonthBalanceSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CurrentMonthBalanceSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), currentMonthBalancePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"current_month_balance\".* FROM \"current_month_balance\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, currentMonthBalancePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CurrentMonthBalanceSlice")
	}

	*o = slice

	return nil
}

// CurrentMonthBalanceExists checks if the CurrentMonthBalance row exists.
func CurrentMonthBalanceExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"current_month_balance\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if current_month_balance exists")
	}

	return exists, nil
}

// Exists checks if the CurrentMonthBalance row exists.
func (o *CurrentMonthBalance) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CurrentMonthBalanceExists(ctx, exec, o.ID)
}
