// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCryptoAssetsTotals(t *testing.T) {
	t.Parallel()

	query := CryptoAssetsTotals()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCryptoAssetsTotalsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCryptoAssetsTotalsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CryptoAssetsTotals().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCryptoAssetsTotalsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CryptoAssetsTotalSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCryptoAssetsTotalsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CryptoAssetsTotalExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CryptoAssetsTotal exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CryptoAssetsTotalExists to return true, but got false.")
	}
}

func testCryptoAssetsTotalsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cryptoAssetsTotalFound, err := FindCryptoAssetsTotal(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if cryptoAssetsTotalFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCryptoAssetsTotalsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CryptoAssetsTotals().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCryptoAssetsTotalsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CryptoAssetsTotals().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCryptoAssetsTotalsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cryptoAssetsTotalOne := &CryptoAssetsTotal{}
	cryptoAssetsTotalTwo := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, cryptoAssetsTotalOne, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}
	if err = randomize.Struct(seed, cryptoAssetsTotalTwo, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cryptoAssetsTotalOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cryptoAssetsTotalTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CryptoAssetsTotals().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCryptoAssetsTotalsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cryptoAssetsTotalOne := &CryptoAssetsTotal{}
	cryptoAssetsTotalTwo := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, cryptoAssetsTotalOne, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}
	if err = randomize.Struct(seed, cryptoAssetsTotalTwo, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cryptoAssetsTotalOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cryptoAssetsTotalTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cryptoAssetsTotalBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func cryptoAssetsTotalAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
	*o = CryptoAssetsTotal{}
	return nil
}

func testCryptoAssetsTotalsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CryptoAssetsTotal{}
	o := &CryptoAssetsTotal{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal object: %s", err)
	}

	AddCryptoAssetsTotalHook(boil.BeforeInsertHook, cryptoAssetsTotalBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalBeforeInsertHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.AfterInsertHook, cryptoAssetsTotalAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalAfterInsertHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.AfterSelectHook, cryptoAssetsTotalAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalAfterSelectHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.BeforeUpdateHook, cryptoAssetsTotalBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalBeforeUpdateHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.AfterUpdateHook, cryptoAssetsTotalAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalAfterUpdateHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.BeforeDeleteHook, cryptoAssetsTotalBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalBeforeDeleteHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.AfterDeleteHook, cryptoAssetsTotalAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalAfterDeleteHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.BeforeUpsertHook, cryptoAssetsTotalBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalBeforeUpsertHooks = []CryptoAssetsTotalHook{}

	AddCryptoAssetsTotalHook(boil.AfterUpsertHook, cryptoAssetsTotalAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsTotalAfterUpsertHooks = []CryptoAssetsTotalHook{}
}

func testCryptoAssetsTotalsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCryptoAssetsTotalsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cryptoAssetsTotalColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCryptoAssetsTotalToManyCryptoAssetsHistories(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsTotal
	var b, c CryptoAssetsHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.CryptoAssetsTotalID, a.ID)
	queries.Assign(&c.CryptoAssetsTotalID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.CryptoAssetsHistories().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.CryptoAssetsTotalID, b.CryptoAssetsTotalID) {
			bFound = true
		}
		if queries.Equal(v.CryptoAssetsTotalID, c.CryptoAssetsTotalID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := CryptoAssetsTotalSlice{&a}
	if err = a.L.LoadCryptoAssetsHistories(ctx, tx, false, (*[]*CryptoAssetsTotal)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CryptoAssetsHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.CryptoAssetsHistories = nil
	if err = a.L.LoadCryptoAssetsHistories(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.CryptoAssetsHistories); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testCryptoAssetsTotalToManyAddOpCryptoAssetsHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsTotal
	var b, c, d, e CryptoAssetsHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CryptoAssetsHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cryptoAssetsHistoryDBTypes, false, strmangle.SetComplement(cryptoAssetsHistoryPrimaryKeyColumns, cryptoAssetsHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*CryptoAssetsHistory{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCryptoAssetsHistories(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.CryptoAssetsTotalID) {
			t.Error("foreign key was wrong value", a.ID, first.CryptoAssetsTotalID)
		}
		if !queries.Equal(a.ID, second.CryptoAssetsTotalID) {
			t.Error("foreign key was wrong value", a.ID, second.CryptoAssetsTotalID)
		}

		if first.R.CryptoAssetsTotal != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.CryptoAssetsTotal != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.CryptoAssetsHistories[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.CryptoAssetsHistories[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.CryptoAssetsHistories().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testCryptoAssetsTotalToManySetOpCryptoAssetsHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsTotal
	var b, c, d, e CryptoAssetsHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CryptoAssetsHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cryptoAssetsHistoryDBTypes, false, strmangle.SetComplement(cryptoAssetsHistoryPrimaryKeyColumns, cryptoAssetsHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetCryptoAssetsHistories(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetCryptoAssetsHistories(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CryptoAssetsTotalID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CryptoAssetsTotalID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.CryptoAssetsTotalID) {
		t.Error("foreign key was wrong value", a.ID, d.CryptoAssetsTotalID)
	}
	if !queries.Equal(a.ID, e.CryptoAssetsTotalID) {
		t.Error("foreign key was wrong value", a.ID, e.CryptoAssetsTotalID)
	}

	if b.R.CryptoAssetsTotal != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CryptoAssetsTotal != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CryptoAssetsTotal != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.CryptoAssetsTotal != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.CryptoAssetsHistories[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.CryptoAssetsHistories[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testCryptoAssetsTotalToManyRemoveOpCryptoAssetsHistories(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsTotal
	var b, c, d, e CryptoAssetsHistory

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*CryptoAssetsHistory{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, cryptoAssetsHistoryDBTypes, false, strmangle.SetComplement(cryptoAssetsHistoryPrimaryKeyColumns, cryptoAssetsHistoryColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddCryptoAssetsHistories(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveCryptoAssetsHistories(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.CryptoAssetsTotalID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.CryptoAssetsTotalID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.CryptoAssetsTotal != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.CryptoAssetsTotal != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.CryptoAssetsTotal != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.CryptoAssetsTotal != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.CryptoAssetsHistories) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.CryptoAssetsHistories[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.CryptoAssetsHistories[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testCryptoAssetsTotalToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CryptoAssetsTotal
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CryptoAssetsTotalSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CryptoAssetsTotal)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCryptoAssetsTotalToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsTotal
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CryptoAssetsTotals[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCryptoAssetsTotalsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCryptoAssetsTotalsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CryptoAssetsTotalSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCryptoAssetsTotalsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CryptoAssetsTotals().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cryptoAssetsTotalDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `Name`: `character varying`, `Symbol`: `character varying`, `Value`: `numeric`}
	_                        = bytes.MinRead
)

func testCryptoAssetsTotalsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cryptoAssetsTotalPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cryptoAssetsTotalAllColumns) == len(cryptoAssetsTotalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCryptoAssetsTotalsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cryptoAssetsTotalAllColumns) == len(cryptoAssetsTotalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsTotal{}
	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cryptoAssetsTotalDBTypes, true, cryptoAssetsTotalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cryptoAssetsTotalAllColumns, cryptoAssetsTotalPrimaryKeyColumns) {
		fields = cryptoAssetsTotalAllColumns
	} else {
		fields = strmangle.SetComplement(
			cryptoAssetsTotalAllColumns,
			cryptoAssetsTotalPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CryptoAssetsTotalSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCryptoAssetsTotalsUpsert(t *testing.T) {
	t.Parallel()

	if len(cryptoAssetsTotalAllColumns) == len(cryptoAssetsTotalPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CryptoAssetsTotal{}
	if err = randomize.Struct(seed, &o, cryptoAssetsTotalDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CryptoAssetsTotal: %s", err)
	}

	count, err := CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CryptoAssetsTotal: %s", err)
	}

	count, err = CryptoAssetsTotals().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
