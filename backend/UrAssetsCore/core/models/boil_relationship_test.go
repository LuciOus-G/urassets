// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("CryptoAssetsHistoryToCryptoAssetsTotalUsingCryptoAssetsTotal", testCryptoAssetsHistoryToOneCryptoAssetsTotalUsingCryptoAssetsTotal)
	t.Run("CryptoAssetsHistoryToUserUsingUser", testCryptoAssetsHistoryToOneUserUsingUser)
	t.Run("CryptoAssetsTotalToUserUsingUser", testCryptoAssetsTotalToOneUserUsingUser)
	t.Run("CurrentMonthBalanceToUserBankUsingBankUser", testCurrentMonthBalanceToOneUserBankUsingBankUser)
	t.Run("CurrentMonthIncomeToUserBankUsingBankUser", testCurrentMonthIncomeToOneUserBankUsingBankUser)
	t.Run("CurrentMonthIncomeToUserUsingUser", testCurrentMonthIncomeToOneUserUsingUser)
	t.Run("GoalToUserUsingUser", testGoalToOneUserUsingUser)
	t.Run("TotalWealthToUserUsingUser", testTotalWealthToOneUserUsingUser)
	t.Run("TransactionToUserBankUsingFromBank", testTransactionToOneUserBankUsingFromBank)
	t.Run("TransactionToUserBankUsingToBank", testTransactionToOneUserBankUsingToBank)
	t.Run("TransactionToUserUsingUser", testTransactionToOneUserUsingUser)
	t.Run("UserBankToBankUsingBank", testUserBankToOneBankUsingBank)
	t.Run("UserBankToUserUsingUser", testUserBankToOneUserUsingUser)
	t.Run("UserExpensesCategoryToUserUsingUser", testUserExpensesCategoryToOneUserUsingUser)
	t.Run("UserIncomeCategoryToUserUsingUser", testUserIncomeCategoryToOneUserUsingUser)
	t.Run("UserStepToUserUsingUser", testUserStepToOneUserUsingUser)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {
	t.Run("UserToUserStepUsingUserStep", testUserOneToOneUserStepUsingUserStep)
}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("BankToUserBanks", testBankToManyUserBanks)
	t.Run("CryptoAssetsTotalToCryptoAssetsHistories", testCryptoAssetsTotalToManyCryptoAssetsHistories)
	t.Run("UserBankToBankUserCurrentMonthBalances", testUserBankToManyBankUserCurrentMonthBalances)
	t.Run("UserBankToBankUserCurrentMonthIncomes", testUserBankToManyBankUserCurrentMonthIncomes)
	t.Run("UserBankToFromBankTransactions", testUserBankToManyFromBankTransactions)
	t.Run("UserBankToToBankTransactions", testUserBankToManyToBankTransactions)
	t.Run("UserToCryptoAssetsHistories", testUserToManyCryptoAssetsHistories)
	t.Run("UserToCryptoAssetsTotals", testUserToManyCryptoAssetsTotals)
	t.Run("UserToCurrentMonthIncomes", testUserToManyCurrentMonthIncomes)
	t.Run("UserToGoals", testUserToManyGoals)
	t.Run("UserToTotalWealths", testUserToManyTotalWealths)
	t.Run("UserToTransactions", testUserToManyTransactions)
	t.Run("UserToUserBanks", testUserToManyUserBanks)
	t.Run("UserToUserExpensesCategories", testUserToManyUserExpensesCategories)
	t.Run("UserToUserIncomeCategories", testUserToManyUserIncomeCategories)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("CryptoAssetsHistoryToCryptoAssetsTotalUsingCryptoAssetsHistories", testCryptoAssetsHistoryToOneSetOpCryptoAssetsTotalUsingCryptoAssetsTotal)
	t.Run("CryptoAssetsHistoryToUserUsingCryptoAssetsHistories", testCryptoAssetsHistoryToOneSetOpUserUsingUser)
	t.Run("CryptoAssetsTotalToUserUsingCryptoAssetsTotals", testCryptoAssetsTotalToOneSetOpUserUsingUser)
	t.Run("CurrentMonthBalanceToUserBankUsingBankUserCurrentMonthBalances", testCurrentMonthBalanceToOneSetOpUserBankUsingBankUser)
	t.Run("CurrentMonthIncomeToUserBankUsingBankUserCurrentMonthIncomes", testCurrentMonthIncomeToOneSetOpUserBankUsingBankUser)
	t.Run("CurrentMonthIncomeToUserUsingCurrentMonthIncomes", testCurrentMonthIncomeToOneSetOpUserUsingUser)
	t.Run("GoalToUserUsingGoals", testGoalToOneSetOpUserUsingUser)
	t.Run("TotalWealthToUserUsingTotalWealths", testTotalWealthToOneSetOpUserUsingUser)
	t.Run("TransactionToUserBankUsingFromBankTransactions", testTransactionToOneSetOpUserBankUsingFromBank)
	t.Run("TransactionToUserBankUsingToBankTransactions", testTransactionToOneSetOpUserBankUsingToBank)
	t.Run("TransactionToUserUsingTransactions", testTransactionToOneSetOpUserUsingUser)
	t.Run("UserBankToBankUsingUserBanks", testUserBankToOneSetOpBankUsingBank)
	t.Run("UserBankToUserUsingUserBanks", testUserBankToOneSetOpUserUsingUser)
	t.Run("UserExpensesCategoryToUserUsingUserExpensesCategories", testUserExpensesCategoryToOneSetOpUserUsingUser)
	t.Run("UserIncomeCategoryToUserUsingUserIncomeCategories", testUserIncomeCategoryToOneSetOpUserUsingUser)
	t.Run("UserStepToUserUsingUserStep", testUserStepToOneSetOpUserUsingUser)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("CryptoAssetsHistoryToCryptoAssetsTotalUsingCryptoAssetsHistories", testCryptoAssetsHistoryToOneRemoveOpCryptoAssetsTotalUsingCryptoAssetsTotal)
	t.Run("TransactionToUserBankUsingFromBankTransactions", testTransactionToOneRemoveOpUserBankUsingFromBank)
	t.Run("TransactionToUserBankUsingToBankTransactions", testTransactionToOneRemoveOpUserBankUsingToBank)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {
	t.Run("UserToUserStepUsingUserStep", testUserOneToOneSetOpUserStepUsingUserStep)
}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("BankToUserBanks", testBankToManyAddOpUserBanks)
	t.Run("CryptoAssetsTotalToCryptoAssetsHistories", testCryptoAssetsTotalToManyAddOpCryptoAssetsHistories)
	t.Run("UserBankToBankUserCurrentMonthBalances", testUserBankToManyAddOpBankUserCurrentMonthBalances)
	t.Run("UserBankToBankUserCurrentMonthIncomes", testUserBankToManyAddOpBankUserCurrentMonthIncomes)
	t.Run("UserBankToFromBankTransactions", testUserBankToManyAddOpFromBankTransactions)
	t.Run("UserBankToToBankTransactions", testUserBankToManyAddOpToBankTransactions)
	t.Run("UserToCryptoAssetsHistories", testUserToManyAddOpCryptoAssetsHistories)
	t.Run("UserToCryptoAssetsTotals", testUserToManyAddOpCryptoAssetsTotals)
	t.Run("UserToCurrentMonthIncomes", testUserToManyAddOpCurrentMonthIncomes)
	t.Run("UserToGoals", testUserToManyAddOpGoals)
	t.Run("UserToTotalWealths", testUserToManyAddOpTotalWealths)
	t.Run("UserToTransactions", testUserToManyAddOpTransactions)
	t.Run("UserToUserBanks", testUserToManyAddOpUserBanks)
	t.Run("UserToUserExpensesCategories", testUserToManyAddOpUserExpensesCategories)
	t.Run("UserToUserIncomeCategories", testUserToManyAddOpUserIncomeCategories)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("CryptoAssetsTotalToCryptoAssetsHistories", testCryptoAssetsTotalToManySetOpCryptoAssetsHistories)
	t.Run("UserBankToFromBankTransactions", testUserBankToManySetOpFromBankTransactions)
	t.Run("UserBankToToBankTransactions", testUserBankToManySetOpToBankTransactions)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("CryptoAssetsTotalToCryptoAssetsHistories", testCryptoAssetsTotalToManyRemoveOpCryptoAssetsHistories)
	t.Run("UserBankToFromBankTransactions", testUserBankToManyRemoveOpFromBankTransactions)
	t.Run("UserBankToToBankTransactions", testUserBankToManyRemoveOpToBankTransactions)
}
