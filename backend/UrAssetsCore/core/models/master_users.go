// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MasterUser is an object representing the database table.
type MasterUser struct {
	UID string `boil:"uid" json:"uid" toml:"uid" yaml:"uid"`
	// it should be unique
	PhoneNumber string      `boil:"phone_number" json:"phone_number" toml:"phone_number" yaml:"phone_number"`
	SecurePin   string      `boil:"secure_pin" json:"secure_pin" toml:"secure_pin" yaml:"secure_pin"`
	Email       null.String `boil:"email" json:"email,omitempty" toml:"email" yaml:"email,omitempty"`
	Password    null.String `boil:"password" json:"password,omitempty" toml:"password" yaml:"password,omitempty"`

	R *masterUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L masterUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MasterUserColumns = struct {
	UID         string
	PhoneNumber string
	SecurePin   string
	Email       string
	Password    string
}{
	UID:         "uid",
	PhoneNumber: "phone_number",
	SecurePin:   "secure_pin",
	Email:       "email",
	Password:    "password",
}

var MasterUserTableColumns = struct {
	UID         string
	PhoneNumber string
	SecurePin   string
	Email       string
	Password    string
}{
	UID:         "master_users.uid",
	PhoneNumber: "master_users.phone_number",
	SecurePin:   "master_users.secure_pin",
	Email:       "master_users.email",
	Password:    "master_users.password",
}

// Generated where

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod    { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod   { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod  { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MasterUserWhere = struct {
	UID         whereHelperstring
	PhoneNumber whereHelperstring
	SecurePin   whereHelperstring
	Email       whereHelpernull_String
	Password    whereHelpernull_String
}{
	UID:         whereHelperstring{field: "\"master_users\".\"uid\""},
	PhoneNumber: whereHelperstring{field: "\"master_users\".\"phone_number\""},
	SecurePin:   whereHelperstring{field: "\"master_users\".\"secure_pin\""},
	Email:       whereHelpernull_String{field: "\"master_users\".\"email\""},
	Password:    whereHelpernull_String{field: "\"master_users\".\"password\""},
}

// MasterUserRels is where relationship names are stored.
var MasterUserRels = struct {
	MasterWallets string
}{
	MasterWallets: "MasterWallets",
}

// masterUserR is where relationships are stored.
type masterUserR struct {
	MasterWallets MasterWalletSlice `boil:"MasterWallets" json:"MasterWallets" toml:"MasterWallets" yaml:"MasterWallets"`
}

// NewStruct creates a new relationship struct
func (*masterUserR) NewStruct() *masterUserR {
	return &masterUserR{}
}

func (r *masterUserR) GetMasterWallets() MasterWalletSlice {
	if r == nil {
		return nil
	}
	return r.MasterWallets
}

// masterUserL is where Load methods for each relationship are stored.
type masterUserL struct{}

var (
	masterUserAllColumns            = []string{"uid", "phone_number", "secure_pin", "email", "password"}
	masterUserColumnsWithoutDefault = []string{"phone_number"}
	masterUserColumnsWithDefault    = []string{"uid", "secure_pin", "email", "password"}
	masterUserPrimaryKeyColumns     = []string{"uid"}
	masterUserGeneratedColumns      = []string{}
)

type (
	// MasterUserSlice is an alias for a slice of pointers to MasterUser.
	// This should almost always be used instead of []MasterUser.
	MasterUserSlice []*MasterUser
	// MasterUserHook is the signature for custom MasterUser hook methods
	MasterUserHook func(context.Context, boil.ContextExecutor, *MasterUser) error

	masterUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	masterUserType                 = reflect.TypeOf(&MasterUser{})
	masterUserMapping              = queries.MakeStructMapping(masterUserType)
	masterUserPrimaryKeyMapping, _ = queries.BindMapping(masterUserType, masterUserMapping, masterUserPrimaryKeyColumns)
	masterUserInsertCacheMut       sync.RWMutex
	masterUserInsertCache          = make(map[string]insertCache)
	masterUserUpdateCacheMut       sync.RWMutex
	masterUserUpdateCache          = make(map[string]updateCache)
	masterUserUpsertCacheMut       sync.RWMutex
	masterUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var masterUserAfterSelectMu sync.Mutex
var masterUserAfterSelectHooks []MasterUserHook

var masterUserBeforeInsertMu sync.Mutex
var masterUserBeforeInsertHooks []MasterUserHook
var masterUserAfterInsertMu sync.Mutex
var masterUserAfterInsertHooks []MasterUserHook

var masterUserBeforeUpdateMu sync.Mutex
var masterUserBeforeUpdateHooks []MasterUserHook
var masterUserAfterUpdateMu sync.Mutex
var masterUserAfterUpdateHooks []MasterUserHook

var masterUserBeforeDeleteMu sync.Mutex
var masterUserBeforeDeleteHooks []MasterUserHook
var masterUserAfterDeleteMu sync.Mutex
var masterUserAfterDeleteHooks []MasterUserHook

var masterUserBeforeUpsertMu sync.Mutex
var masterUserBeforeUpsertHooks []MasterUserHook
var masterUserAfterUpsertMu sync.Mutex
var masterUserAfterUpsertHooks []MasterUserHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MasterUser) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MasterUser) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MasterUser) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MasterUser) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MasterUser) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MasterUser) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MasterUser) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MasterUser) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MasterUser) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterUserAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMasterUserHook registers your hook function for all future operations.
func AddMasterUserHook(hookPoint boil.HookPoint, masterUserHook MasterUserHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		masterUserAfterSelectMu.Lock()
		masterUserAfterSelectHooks = append(masterUserAfterSelectHooks, masterUserHook)
		masterUserAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		masterUserBeforeInsertMu.Lock()
		masterUserBeforeInsertHooks = append(masterUserBeforeInsertHooks, masterUserHook)
		masterUserBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		masterUserAfterInsertMu.Lock()
		masterUserAfterInsertHooks = append(masterUserAfterInsertHooks, masterUserHook)
		masterUserAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		masterUserBeforeUpdateMu.Lock()
		masterUserBeforeUpdateHooks = append(masterUserBeforeUpdateHooks, masterUserHook)
		masterUserBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		masterUserAfterUpdateMu.Lock()
		masterUserAfterUpdateHooks = append(masterUserAfterUpdateHooks, masterUserHook)
		masterUserAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		masterUserBeforeDeleteMu.Lock()
		masterUserBeforeDeleteHooks = append(masterUserBeforeDeleteHooks, masterUserHook)
		masterUserBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		masterUserAfterDeleteMu.Lock()
		masterUserAfterDeleteHooks = append(masterUserAfterDeleteHooks, masterUserHook)
		masterUserAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		masterUserBeforeUpsertMu.Lock()
		masterUserBeforeUpsertHooks = append(masterUserBeforeUpsertHooks, masterUserHook)
		masterUserBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		masterUserAfterUpsertMu.Lock()
		masterUserAfterUpsertHooks = append(masterUserAfterUpsertHooks, masterUserHook)
		masterUserAfterUpsertMu.Unlock()
	}
}

// One returns a single masterUser record from the query.
func (q masterUserQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MasterUser, error) {
	o := &MasterUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for master_users")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MasterUser records from the query.
func (q masterUserQuery) All(ctx context.Context, exec boil.ContextExecutor) (MasterUserSlice, error) {
	var o []*MasterUser

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MasterUser slice")
	}

	if len(masterUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MasterUser records in the query.
func (q masterUserQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count master_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q masterUserQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if master_users exists")
	}

	return count > 0, nil
}

// MasterWallets retrieves all the master_wallet's MasterWallets with an executor.
func (o *MasterUser) MasterWallets(mods ...qm.QueryMod) masterWalletQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"master_wallet\".\"master_user_id\"=?", o.UID),
	)

	return MasterWallets(queryMods...)
}

// LoadMasterWallets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (masterUserL) LoadMasterWallets(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMasterUser interface{}, mods queries.Applicator) error {
	var slice []*MasterUser
	var object *MasterUser

	if singular {
		var ok bool
		object, ok = maybeMasterUser.(*MasterUser)
		if !ok {
			object = new(MasterUser)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMasterUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMasterUser))
			}
		}
	} else {
		s, ok := maybeMasterUser.(*[]*MasterUser)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMasterUser)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMasterUser))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &masterUserR{}
		}
		args[object.UID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &masterUserR{}
			}
			args[obj.UID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`master_wallet`),
		qm.WhereIn(`master_wallet.master_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load master_wallet")
	}

	var resultSlice []*MasterWallet
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice master_wallet")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on master_wallet")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for master_wallet")
	}

	if len(masterWalletAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.MasterWallets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &masterWalletR{}
			}
			foreign.R.MasterUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.UID, foreign.MasterUserID) {
				local.R.MasterWallets = append(local.R.MasterWallets, foreign)
				if foreign.R == nil {
					foreign.R = &masterWalletR{}
				}
				foreign.R.MasterUser = local
				break
			}
		}
	}

	return nil
}

// AddMasterWallets adds the given related objects to the existing relationships
// of the master_user, optionally inserting them as new records.
// Appends related to o.R.MasterWallets.
// Sets related.R.MasterUser appropriately.
func (o *MasterUser) AddMasterWallets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MasterWallet) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.MasterUserID, o.UID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"master_wallet\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"master_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, masterWalletPrimaryKeyColumns),
			)
			values := []interface{}{o.UID, rel.Wid}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.MasterUserID, o.UID)
		}
	}

	if o.R == nil {
		o.R = &masterUserR{
			MasterWallets: related,
		}
	} else {
		o.R.MasterWallets = append(o.R.MasterWallets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &masterWalletR{
				MasterUser: o,
			}
		} else {
			rel.R.MasterUser = o
		}
	}
	return nil
}

// SetMasterWallets removes all previously related items of the
// master_user replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.MasterUser's MasterWallets accordingly.
// Replaces o.R.MasterWallets with related.
// Sets related.R.MasterUser's MasterWallets accordingly.
func (o *MasterUser) SetMasterWallets(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*MasterWallet) error {
	query := "update \"master_wallet\" set \"master_user_id\" = null where \"master_user_id\" = $1"
	values := []interface{}{o.UID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.MasterWallets {
			queries.SetScanner(&rel.MasterUserID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.MasterUser = nil
		}
		o.R.MasterWallets = nil
	}

	return o.AddMasterWallets(ctx, exec, insert, related...)
}

// RemoveMasterWallets relationships from objects passed in.
// Removes related items from R.MasterWallets (uses pointer comparison, removal does not keep order)
// Sets related.R.MasterUser.
func (o *MasterUser) RemoveMasterWallets(ctx context.Context, exec boil.ContextExecutor, related ...*MasterWallet) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.MasterUserID, nil)
		if rel.R != nil {
			rel.R.MasterUser = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("master_user_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.MasterWallets {
			if rel != ri {
				continue
			}

			ln := len(o.R.MasterWallets)
			if ln > 1 && i < ln-1 {
				o.R.MasterWallets[i] = o.R.MasterWallets[ln-1]
			}
			o.R.MasterWallets = o.R.MasterWallets[:ln-1]
			break
		}
	}

	return nil
}

// MasterUsers retrieves all the records using an executor.
func MasterUsers(mods ...qm.QueryMod) masterUserQuery {
	mods = append(mods, qm.From("\"master_users\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"master_users\".*"})
	}

	return masterUserQuery{q}
}

// FindMasterUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMasterUser(ctx context.Context, exec boil.ContextExecutor, uID string, selectCols ...string) (*MasterUser, error) {
	masterUserObj := &MasterUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"master_users\" where \"uid\"=$1", sel,
	)

	q := queries.Raw(query, uID)

	err := q.Bind(ctx, exec, masterUserObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from master_users")
	}

	if err = masterUserObj.doAfterSelectHooks(ctx, exec); err != nil {
		return masterUserObj, err
	}

	return masterUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MasterUser) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no master_users provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(masterUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	masterUserInsertCacheMut.RLock()
	cache, cached := masterUserInsertCache[key]
	masterUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			masterUserAllColumns,
			masterUserColumnsWithDefault,
			masterUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(masterUserType, masterUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(masterUserType, masterUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"master_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"master_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into master_users")
	}

	if !cached {
		masterUserInsertCacheMut.Lock()
		masterUserInsertCache[key] = cache
		masterUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MasterUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MasterUser) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	masterUserUpdateCacheMut.RLock()
	cache, cached := masterUserUpdateCache[key]
	masterUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			masterUserAllColumns,
			masterUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update master_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"master_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, masterUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(masterUserType, masterUserMapping, append(wl, masterUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update master_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for master_users")
	}

	if !cached {
		masterUserUpdateCacheMut.Lock()
		masterUserUpdateCache[key] = cache
		masterUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q masterUserQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for master_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for master_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MasterUserSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"master_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, masterUserPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in masterUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all masterUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MasterUser) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no master_users provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(masterUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	masterUserUpsertCacheMut.RLock()
	cache, cached := masterUserUpsertCache[key]
	masterUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			masterUserAllColumns,
			masterUserColumnsWithDefault,
			masterUserColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			masterUserAllColumns,
			masterUserPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert master_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(masterUserPrimaryKeyColumns))
			copy(conflict, masterUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"master_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(masterUserType, masterUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(masterUserType, masterUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert master_users")
	}

	if !cached {
		masterUserUpsertCacheMut.Lock()
		masterUserUpsertCache[key] = cache
		masterUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MasterUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MasterUser) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MasterUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), masterUserPrimaryKeyMapping)
	sql := "DELETE FROM \"master_users\" WHERE \"uid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from master_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for master_users")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q masterUserQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no masterUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from master_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for master_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MasterUserSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(masterUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"master_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, masterUserPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from masterUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for master_users")
	}

	if len(masterUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MasterUser) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMasterUser(ctx, exec, o.UID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MasterUserSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MasterUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"master_users\".* FROM \"master_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, masterUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MasterUserSlice")
	}

	*o = slice

	return nil
}

// MasterUserExists checks if the MasterUser row exists.
func MasterUserExists(ctx context.Context, exec boil.ContextExecutor, uID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"master_users\" where \"uid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, uID)
	}
	row := exec.QueryRowContext(ctx, sql, uID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if master_users exists")
	}

	return exists, nil
}

// Exists checks if the MasterUser row exists.
func (o *MasterUser) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MasterUserExists(ctx, exec, o.UID)
}
