// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// Goal is an object representing the database table.
type Goal struct {
	// Auto Generate UUID V4
	ID               string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID           string        `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	GoalName         string        `boil:"goal_name" json:"goal_name" toml:"goal_name" yaml:"goal_name"`
	GoalMotivation   null.String   `boil:"goal_motivation" json:"goal_motivation,omitempty" toml:"goal_motivation" yaml:"goal_motivation,omitempty"`
	GoalDescriptions string        `boil:"goal_descriptions" json:"goal_descriptions" toml:"goal_descriptions" yaml:"goal_descriptions"`
	GoalAmount       types.Decimal `boil:"goal_amount" json:"goal_amount" toml:"goal_amount" yaml:"goal_amount"`
	Priority         null.Int      `boil:"priority" json:"priority,omitempty" toml:"priority" yaml:"priority,omitempty"`

	R *goalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L goalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var GoalColumns = struct {
	ID               string
	UserID           string
	GoalName         string
	GoalMotivation   string
	GoalDescriptions string
	GoalAmount       string
	Priority         string
}{
	ID:               "id",
	UserID:           "user_id",
	GoalName:         "goal_name",
	GoalMotivation:   "goal_motivation",
	GoalDescriptions: "goal_descriptions",
	GoalAmount:       "goal_amount",
	Priority:         "priority",
}

var GoalTableColumns = struct {
	ID               string
	UserID           string
	GoalName         string
	GoalMotivation   string
	GoalDescriptions string
	GoalAmount       string
	Priority         string
}{
	ID:               "goals.id",
	UserID:           "goals.user_id",
	GoalName:         "goals.goal_name",
	GoalMotivation:   "goals.goal_motivation",
	GoalDescriptions: "goals.goal_descriptions",
	GoalAmount:       "goals.goal_amount",
	Priority:         "goals.priority",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var GoalWhere = struct {
	ID               whereHelperstring
	UserID           whereHelperstring
	GoalName         whereHelperstring
	GoalMotivation   whereHelpernull_String
	GoalDescriptions whereHelperstring
	GoalAmount       whereHelpertypes_Decimal
	Priority         whereHelpernull_Int
}{
	ID:               whereHelperstring{field: "\"goals\".\"id\""},
	UserID:           whereHelperstring{field: "\"goals\".\"user_id\""},
	GoalName:         whereHelperstring{field: "\"goals\".\"goal_name\""},
	GoalMotivation:   whereHelpernull_String{field: "\"goals\".\"goal_motivation\""},
	GoalDescriptions: whereHelperstring{field: "\"goals\".\"goal_descriptions\""},
	GoalAmount:       whereHelpertypes_Decimal{field: "\"goals\".\"goal_amount\""},
	Priority:         whereHelpernull_Int{field: "\"goals\".\"priority\""},
}

// GoalRels is where relationship names are stored.
var GoalRels = struct {
	User string
}{
	User: "User",
}

// goalR is where relationships are stored.
type goalR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*goalR) NewStruct() *goalR {
	return &goalR{}
}

func (r *goalR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// goalL is where Load methods for each relationship are stored.
type goalL struct{}

var (
	goalAllColumns            = []string{"id", "user_id", "goal_name", "goal_motivation", "goal_descriptions", "goal_amount", "priority"}
	goalColumnsWithoutDefault = []string{"user_id", "goal_name", "goal_descriptions", "goal_amount"}
	goalColumnsWithDefault    = []string{"id", "goal_motivation", "priority"}
	goalPrimaryKeyColumns     = []string{"id"}
	goalGeneratedColumns      = []string{}
)

type (
	// GoalSlice is an alias for a slice of pointers to Goal.
	// This should almost always be used instead of []Goal.
	GoalSlice []*Goal
	// GoalHook is the signature for custom Goal hook methods
	GoalHook func(context.Context, boil.ContextExecutor, *Goal) error

	goalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	goalType                 = reflect.TypeOf(&Goal{})
	goalMapping              = queries.MakeStructMapping(goalType)
	goalPrimaryKeyMapping, _ = queries.BindMapping(goalType, goalMapping, goalPrimaryKeyColumns)
	goalInsertCacheMut       sync.RWMutex
	goalInsertCache          = make(map[string]insertCache)
	goalUpdateCacheMut       sync.RWMutex
	goalUpdateCache          = make(map[string]updateCache)
	goalUpsertCacheMut       sync.RWMutex
	goalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var goalAfterSelectMu sync.Mutex
var goalAfterSelectHooks []GoalHook

var goalBeforeInsertMu sync.Mutex
var goalBeforeInsertHooks []GoalHook
var goalAfterInsertMu sync.Mutex
var goalAfterInsertHooks []GoalHook

var goalBeforeUpdateMu sync.Mutex
var goalBeforeUpdateHooks []GoalHook
var goalAfterUpdateMu sync.Mutex
var goalAfterUpdateHooks []GoalHook

var goalBeforeDeleteMu sync.Mutex
var goalBeforeDeleteHooks []GoalHook
var goalAfterDeleteMu sync.Mutex
var goalAfterDeleteHooks []GoalHook

var goalBeforeUpsertMu sync.Mutex
var goalBeforeUpsertHooks []GoalHook
var goalAfterUpsertMu sync.Mutex
var goalAfterUpsertHooks []GoalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Goal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Goal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Goal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Goal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Goal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Goal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Goal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Goal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Goal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range goalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddGoalHook registers your hook function for all future operations.
func AddGoalHook(hookPoint boil.HookPoint, goalHook GoalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		goalAfterSelectMu.Lock()
		goalAfterSelectHooks = append(goalAfterSelectHooks, goalHook)
		goalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		goalBeforeInsertMu.Lock()
		goalBeforeInsertHooks = append(goalBeforeInsertHooks, goalHook)
		goalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		goalAfterInsertMu.Lock()
		goalAfterInsertHooks = append(goalAfterInsertHooks, goalHook)
		goalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		goalBeforeUpdateMu.Lock()
		goalBeforeUpdateHooks = append(goalBeforeUpdateHooks, goalHook)
		goalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		goalAfterUpdateMu.Lock()
		goalAfterUpdateHooks = append(goalAfterUpdateHooks, goalHook)
		goalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		goalBeforeDeleteMu.Lock()
		goalBeforeDeleteHooks = append(goalBeforeDeleteHooks, goalHook)
		goalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		goalAfterDeleteMu.Lock()
		goalAfterDeleteHooks = append(goalAfterDeleteHooks, goalHook)
		goalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		goalBeforeUpsertMu.Lock()
		goalBeforeUpsertHooks = append(goalBeforeUpsertHooks, goalHook)
		goalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		goalAfterUpsertMu.Lock()
		goalAfterUpsertHooks = append(goalAfterUpsertHooks, goalHook)
		goalAfterUpsertMu.Unlock()
	}
}

// One returns a single goal record from the query.
func (q goalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*Goal, error) {
	o := &Goal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for goals")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Goal records from the query.
func (q goalQuery) All(ctx context.Context, exec boil.ContextExecutor) (GoalSlice, error) {
	var o []*Goal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Goal slice")
	}

	if len(goalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Goal records in the query.
func (q goalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count goals rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q goalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if goals exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *Goal) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (goalL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeGoal interface{}, mods queries.Applicator) error {
	var slice []*Goal
	var object *Goal

	if singular {
		var ok bool
		object, ok = maybeGoal.(*Goal)
		if !ok {
			object = new(Goal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeGoal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeGoal))
			}
		}
	} else {
		s, ok := maybeGoal.(*[]*Goal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeGoal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeGoal))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &goalR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &goalR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.Goals = append(foreign.R.Goals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.Goals = append(foreign.R.Goals, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the goal to the related item.
// Sets o.R.User to related.
// Adds o to related.R.Goals.
func (o *Goal) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"goals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, goalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &goalR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			Goals: GoalSlice{o},
		}
	} else {
		related.R.Goals = append(related.R.Goals, o)
	}

	return nil
}

// Goals retrieves all the records using an executor.
func Goals(mods ...qm.QueryMod) goalQuery {
	mods = append(mods, qm.From("\"goals\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"goals\".*"})
	}

	return goalQuery{q}
}

// FindGoal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindGoal(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*Goal, error) {
	goalObj := &Goal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"goals\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, goalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from goals")
	}

	if err = goalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return goalObj, err
	}

	return goalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Goal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no goals provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	goalInsertCacheMut.RLock()
	cache, cached := goalInsertCache[key]
	goalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			goalAllColumns,
			goalColumnsWithDefault,
			goalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(goalType, goalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(goalType, goalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"goals\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"goals\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into goals")
	}

	if !cached {
		goalInsertCacheMut.Lock()
		goalInsertCache[key] = cache
		goalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the Goal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Goal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	goalUpdateCacheMut.RLock()
	cache, cached := goalUpdateCache[key]
	goalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			goalAllColumns,
			goalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update goals, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"goals\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, goalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(goalType, goalMapping, append(wl, goalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update goals row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for goals")
	}

	if !cached {
		goalUpdateCacheMut.Lock()
		goalUpdateCache[key] = cache
		goalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q goalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for goals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for goals")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o GoalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"goals\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, goalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in goal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all goal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Goal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no goals provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(goalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	goalUpsertCacheMut.RLock()
	cache, cached := goalUpsertCache[key]
	goalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			goalAllColumns,
			goalColumnsWithDefault,
			goalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			goalAllColumns,
			goalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert goals, could not build update column list")
		}

		ret := strmangle.SetComplement(goalAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(goalPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert goals, could not build conflict column list")
			}

			conflict = make([]string, len(goalPrimaryKeyColumns))
			copy(conflict, goalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"goals\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(goalType, goalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(goalType, goalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert goals")
	}

	if !cached {
		goalUpsertCacheMut.Lock()
		goalUpsertCache[key] = cache
		goalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single Goal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Goal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Goal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), goalPrimaryKeyMapping)
	sql := "DELETE FROM \"goals\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from goals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for goals")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q goalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no goalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from goals")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for goals")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o GoalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(goalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"goals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from goal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for goals")
	}

	if len(goalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Goal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindGoal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *GoalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := GoalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), goalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"goals\".* FROM \"goals\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, goalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in GoalSlice")
	}

	*o = slice

	return nil
}

// GoalExists checks if the Goal row exists.
func GoalExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"goals\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if goals exists")
	}

	return exists, nil
}

// Exists checks if the Goal row exists.
func (o *Goal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return GoalExists(ctx, exec, o.ID)
}
