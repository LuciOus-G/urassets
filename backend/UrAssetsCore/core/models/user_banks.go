// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// UserBank is an object representing the database table.
type UserBank struct {
	// Auto Generate UUID V4
	ID        string            `boil:"id" json:"id" toml:"id" yaml:"id"`
	BankID    string            `boil:"bank_id" json:"bank_id" toml:"bank_id" yaml:"bank_id"`
	UserID    string            `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	CreatedAt null.Time         `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt null.Time         `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`
	IsActive  null.Bool         `boil:"is_active" json:"is_active,omitempty" toml:"is_active" yaml:"is_active,omitempty"`
	Balance   types.NullDecimal `boil:"balance" json:"balance,omitempty" toml:"balance" yaml:"balance,omitempty"`

	R *userBankR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userBankL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserBankColumns = struct {
	ID        string
	BankID    string
	UserID    string
	CreatedAt string
	UpdatedAt string
	IsActive  string
	Balance   string
}{
	ID:        "id",
	BankID:    "bank_id",
	UserID:    "user_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	IsActive:  "is_active",
	Balance:   "balance",
}

var UserBankTableColumns = struct {
	ID        string
	BankID    string
	UserID    string
	CreatedAt string
	UpdatedAt string
	IsActive  string
	Balance   string
}{
	ID:        "user_banks.id",
	BankID:    "user_banks.bank_id",
	UserID:    "user_banks.user_id",
	CreatedAt: "user_banks.created_at",
	UpdatedAt: "user_banks.updated_at",
	IsActive:  "user_banks.is_active",
	Balance:   "user_banks.balance",
}

// Generated where

var UserBankWhere = struct {
	ID        whereHelperstring
	BankID    whereHelperstring
	UserID    whereHelperstring
	CreatedAt whereHelpernull_Time
	UpdatedAt whereHelpernull_Time
	IsActive  whereHelpernull_Bool
	Balance   whereHelpertypes_NullDecimal
}{
	ID:        whereHelperstring{field: "\"user_banks\".\"id\""},
	BankID:    whereHelperstring{field: "\"user_banks\".\"bank_id\""},
	UserID:    whereHelperstring{field: "\"user_banks\".\"user_id\""},
	CreatedAt: whereHelpernull_Time{field: "\"user_banks\".\"created_at\""},
	UpdatedAt: whereHelpernull_Time{field: "\"user_banks\".\"updated_at\""},
	IsActive:  whereHelpernull_Bool{field: "\"user_banks\".\"is_active\""},
	Balance:   whereHelpertypes_NullDecimal{field: "\"user_banks\".\"balance\""},
}

// UserBankRels is where relationship names are stored.
var UserBankRels = struct {
	Bank                        string
	User                        string
	BankUserCurrentMonthBills   string
	BankUserCurrentMonthIncomes string
	FromBankTransactions        string
	ToBankTransactions          string
}{
	Bank:                        "Bank",
	User:                        "User",
	BankUserCurrentMonthBills:   "BankUserCurrentMonthBills",
	BankUserCurrentMonthIncomes: "BankUserCurrentMonthIncomes",
	FromBankTransactions:        "FromBankTransactions",
	ToBankTransactions:          "ToBankTransactions",
}

// userBankR is where relationships are stored.
type userBankR struct {
	Bank                        *Bank                   `boil:"Bank" json:"Bank" toml:"Bank" yaml:"Bank"`
	User                        *User                   `boil:"User" json:"User" toml:"User" yaml:"User"`
	BankUserCurrentMonthBills   CurrentMonthBillSlice   `boil:"BankUserCurrentMonthBills" json:"BankUserCurrentMonthBills" toml:"BankUserCurrentMonthBills" yaml:"BankUserCurrentMonthBills"`
	BankUserCurrentMonthIncomes CurrentMonthIncomeSlice `boil:"BankUserCurrentMonthIncomes" json:"BankUserCurrentMonthIncomes" toml:"BankUserCurrentMonthIncomes" yaml:"BankUserCurrentMonthIncomes"`
	FromBankTransactions        TransactionSlice        `boil:"FromBankTransactions" json:"FromBankTransactions" toml:"FromBankTransactions" yaml:"FromBankTransactions"`
	ToBankTransactions          TransactionSlice        `boil:"ToBankTransactions" json:"ToBankTransactions" toml:"ToBankTransactions" yaml:"ToBankTransactions"`
}

// NewStruct creates a new relationship struct
func (*userBankR) NewStruct() *userBankR {
	return &userBankR{}
}

func (r *userBankR) GetBank() *Bank {
	if r == nil {
		return nil
	}
	return r.Bank
}

func (r *userBankR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *userBankR) GetBankUserCurrentMonthBills() CurrentMonthBillSlice {
	if r == nil {
		return nil
	}
	return r.BankUserCurrentMonthBills
}

func (r *userBankR) GetBankUserCurrentMonthIncomes() CurrentMonthIncomeSlice {
	if r == nil {
		return nil
	}
	return r.BankUserCurrentMonthIncomes
}

func (r *userBankR) GetFromBankTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.FromBankTransactions
}

func (r *userBankR) GetToBankTransactions() TransactionSlice {
	if r == nil {
		return nil
	}
	return r.ToBankTransactions
}

// userBankL is where Load methods for each relationship are stored.
type userBankL struct{}

var (
	userBankAllColumns            = []string{"id", "bank_id", "user_id", "created_at", "updated_at", "is_active", "balance"}
	userBankColumnsWithoutDefault = []string{"bank_id", "user_id"}
	userBankColumnsWithDefault    = []string{"id", "created_at", "updated_at", "is_active", "balance"}
	userBankPrimaryKeyColumns     = []string{"id"}
	userBankGeneratedColumns      = []string{}
)

type (
	// UserBankSlice is an alias for a slice of pointers to UserBank.
	// This should almost always be used instead of []UserBank.
	UserBankSlice []*UserBank
	// UserBankHook is the signature for custom UserBank hook methods
	UserBankHook func(context.Context, boil.ContextExecutor, *UserBank) error

	userBankQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userBankType                 = reflect.TypeOf(&UserBank{})
	userBankMapping              = queries.MakeStructMapping(userBankType)
	userBankPrimaryKeyMapping, _ = queries.BindMapping(userBankType, userBankMapping, userBankPrimaryKeyColumns)
	userBankInsertCacheMut       sync.RWMutex
	userBankInsertCache          = make(map[string]insertCache)
	userBankUpdateCacheMut       sync.RWMutex
	userBankUpdateCache          = make(map[string]updateCache)
	userBankUpsertCacheMut       sync.RWMutex
	userBankUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userBankAfterSelectMu sync.Mutex
var userBankAfterSelectHooks []UserBankHook

var userBankBeforeInsertMu sync.Mutex
var userBankBeforeInsertHooks []UserBankHook
var userBankAfterInsertMu sync.Mutex
var userBankAfterInsertHooks []UserBankHook

var userBankBeforeUpdateMu sync.Mutex
var userBankBeforeUpdateHooks []UserBankHook
var userBankAfterUpdateMu sync.Mutex
var userBankAfterUpdateHooks []UserBankHook

var userBankBeforeDeleteMu sync.Mutex
var userBankBeforeDeleteHooks []UserBankHook
var userBankAfterDeleteMu sync.Mutex
var userBankAfterDeleteHooks []UserBankHook

var userBankBeforeUpsertMu sync.Mutex
var userBankBeforeUpsertHooks []UserBankHook
var userBankAfterUpsertMu sync.Mutex
var userBankAfterUpsertHooks []UserBankHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserBank) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserBank) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserBank) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserBank) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserBank) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserBank) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserBank) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserBank) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserBank) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userBankAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserBankHook registers your hook function for all future operations.
func AddUserBankHook(hookPoint boil.HookPoint, userBankHook UserBankHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userBankAfterSelectMu.Lock()
		userBankAfterSelectHooks = append(userBankAfterSelectHooks, userBankHook)
		userBankAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userBankBeforeInsertMu.Lock()
		userBankBeforeInsertHooks = append(userBankBeforeInsertHooks, userBankHook)
		userBankBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userBankAfterInsertMu.Lock()
		userBankAfterInsertHooks = append(userBankAfterInsertHooks, userBankHook)
		userBankAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userBankBeforeUpdateMu.Lock()
		userBankBeforeUpdateHooks = append(userBankBeforeUpdateHooks, userBankHook)
		userBankBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userBankAfterUpdateMu.Lock()
		userBankAfterUpdateHooks = append(userBankAfterUpdateHooks, userBankHook)
		userBankAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userBankBeforeDeleteMu.Lock()
		userBankBeforeDeleteHooks = append(userBankBeforeDeleteHooks, userBankHook)
		userBankBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userBankAfterDeleteMu.Lock()
		userBankAfterDeleteHooks = append(userBankAfterDeleteHooks, userBankHook)
		userBankAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userBankBeforeUpsertMu.Lock()
		userBankBeforeUpsertHooks = append(userBankBeforeUpsertHooks, userBankHook)
		userBankBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userBankAfterUpsertMu.Lock()
		userBankAfterUpsertHooks = append(userBankAfterUpsertHooks, userBankHook)
		userBankAfterUpsertMu.Unlock()
	}
}

// One returns a single userBank record from the query.
func (q userBankQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserBank, error) {
	o := &UserBank{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_banks")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserBank records from the query.
func (q userBankQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserBankSlice, error) {
	var o []*UserBank

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserBank slice")
	}

	if len(userBankAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserBank records in the query.
func (q userBankQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_banks rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userBankQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_banks exists")
	}

	return count > 0, nil
}

// Bank pointed to by the foreign key.
func (o *UserBank) Bank(mods ...qm.QueryMod) bankQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.BankID),
	}

	queryMods = append(queryMods, mods...)

	return Banks(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserBank) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// BankUserCurrentMonthBills retrieves all the current_month_bill's CurrentMonthBills with an executor via bank_user_id column.
func (o *UserBank) BankUserCurrentMonthBills(mods ...qm.QueryMod) currentMonthBillQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"current_month_bills\".\"bank_user_id\"=?", o.ID),
	)

	return CurrentMonthBills(queryMods...)
}

// BankUserCurrentMonthIncomes retrieves all the current_month_income's CurrentMonthIncomes with an executor via bank_user_id column.
func (o *UserBank) BankUserCurrentMonthIncomes(mods ...qm.QueryMod) currentMonthIncomeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"current_month_income\".\"bank_user_id\"=?", o.ID),
	)

	return CurrentMonthIncomes(queryMods...)
}

// FromBankTransactions retrieves all the transaction's Transactions with an executor via from_bank_id column.
func (o *UserBank) FromBankTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"from_bank_id\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// ToBankTransactions retrieves all the transaction's Transactions with an executor via to_bank_id column.
func (o *UserBank) ToBankTransactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transactions\".\"to_bank_id\"=?", o.ID),
	)

	return Transactions(queryMods...)
}

// LoadBank allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBankL) LoadBank(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBank interface{}, mods queries.Applicator) error {
	var slice []*UserBank
	var object *UserBank

	if singular {
		var ok bool
		object, ok = maybeUserBank.(*UserBank)
		if !ok {
			object = new(UserBank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBank))
			}
		}
	} else {
		s, ok := maybeUserBank.(*[]*UserBank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBank))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBankR{}
		}
		args[object.BankID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBankR{}
			}

			args[obj.BankID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`banks`),
		qm.WhereIn(`banks.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Bank")
	}

	var resultSlice []*Bank
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Bank")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for banks")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for banks")
	}

	if len(bankAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Bank = foreign
		if foreign.R == nil {
			foreign.R = &bankR{}
		}
		foreign.R.UserBanks = append(foreign.R.UserBanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.BankID == foreign.ID {
				local.R.Bank = foreign
				if foreign.R == nil {
					foreign.R = &bankR{}
				}
				foreign.R.UserBanks = append(foreign.R.UserBanks, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userBankL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBank interface{}, mods queries.Applicator) error {
	var slice []*UserBank
	var object *UserBank

	if singular {
		var ok bool
		object, ok = maybeUserBank.(*UserBank)
		if !ok {
			object = new(UserBank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBank))
			}
		}
	} else {
		s, ok := maybeUserBank.(*[]*UserBank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBank))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBankR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBankR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserBanks = append(foreign.R.UserBanks, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserBanks = append(foreign.R.UserBanks, local)
				break
			}
		}
	}

	return nil
}

// LoadBankUserCurrentMonthBills allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userBankL) LoadBankUserCurrentMonthBills(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBank interface{}, mods queries.Applicator) error {
	var slice []*UserBank
	var object *UserBank

	if singular {
		var ok bool
		object, ok = maybeUserBank.(*UserBank)
		if !ok {
			object = new(UserBank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBank))
			}
		}
	} else {
		s, ok := maybeUserBank.(*[]*UserBank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBank))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBankR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBankR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`current_month_bills`),
		qm.WhereIn(`current_month_bills.bank_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load current_month_bills")
	}

	var resultSlice []*CurrentMonthBill
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice current_month_bills")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on current_month_bills")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for current_month_bills")
	}

	if len(currentMonthBillAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BankUserCurrentMonthBills = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentMonthBillR{}
			}
			foreign.R.BankUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BankUserID {
				local.R.BankUserCurrentMonthBills = append(local.R.BankUserCurrentMonthBills, foreign)
				if foreign.R == nil {
					foreign.R = &currentMonthBillR{}
				}
				foreign.R.BankUser = local
				break
			}
		}
	}

	return nil
}

// LoadBankUserCurrentMonthIncomes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userBankL) LoadBankUserCurrentMonthIncomes(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBank interface{}, mods queries.Applicator) error {
	var slice []*UserBank
	var object *UserBank

	if singular {
		var ok bool
		object, ok = maybeUserBank.(*UserBank)
		if !ok {
			object = new(UserBank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBank))
			}
		}
	} else {
		s, ok := maybeUserBank.(*[]*UserBank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBank))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBankR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBankR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`current_month_income`),
		qm.WhereIn(`current_month_income.bank_user_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load current_month_income")
	}

	var resultSlice []*CurrentMonthIncome
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice current_month_income")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on current_month_income")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for current_month_income")
	}

	if len(currentMonthIncomeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.BankUserCurrentMonthIncomes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &currentMonthIncomeR{}
			}
			foreign.R.BankUser = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.BankUserID {
				local.R.BankUserCurrentMonthIncomes = append(local.R.BankUserCurrentMonthIncomes, foreign)
				if foreign.R == nil {
					foreign.R = &currentMonthIncomeR{}
				}
				foreign.R.BankUser = local
				break
			}
		}
	}

	return nil
}

// LoadFromBankTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userBankL) LoadFromBankTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBank interface{}, mods queries.Applicator) error {
	var slice []*UserBank
	var object *UserBank

	if singular {
		var ok bool
		object, ok = maybeUserBank.(*UserBank)
		if !ok {
			object = new(UserBank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBank))
			}
		}
	} else {
		s, ok := maybeUserBank.(*[]*UserBank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBank))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBankR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBankR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.from_bank_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.FromBankTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.FromBank = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.FromBankID) {
				local.R.FromBankTransactions = append(local.R.FromBankTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.FromBank = local
				break
			}
		}
	}

	return nil
}

// LoadToBankTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (userBankL) LoadToBankTransactions(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserBank interface{}, mods queries.Applicator) error {
	var slice []*UserBank
	var object *UserBank

	if singular {
		var ok bool
		object, ok = maybeUserBank.(*UserBank)
		if !ok {
			object = new(UserBank)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserBank))
			}
		}
	} else {
		s, ok := maybeUserBank.(*[]*UserBank)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserBank)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserBank))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userBankR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userBankR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`transactions`),
		qm.WhereIn(`transactions.to_bank_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transactions")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.ToBankTransactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.ToBank = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.ToBankID) {
				local.R.ToBankTransactions = append(local.R.ToBankTransactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.ToBank = local
				break
			}
		}
	}

	return nil
}

// SetBank of the userBank to the related item.
// Sets o.R.Bank to related.
// Adds o to related.R.UserBanks.
func (o *UserBank) SetBank(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Bank) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_banks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"bank_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBankPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.BankID = related.ID
	if o.R == nil {
		o.R = &userBankR{
			Bank: related,
		}
	} else {
		o.R.Bank = related
	}

	if related.R == nil {
		related.R = &bankR{
			UserBanks: UserBankSlice{o},
		}
	} else {
		related.R.UserBanks = append(related.R.UserBanks, o)
	}

	return nil
}

// SetUser of the userBank to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserBanks.
func (o *UserBank) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_banks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userBankPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userBankR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserBanks: UserBankSlice{o},
		}
	} else {
		related.R.UserBanks = append(related.R.UserBanks, o)
	}

	return nil
}

// AddBankUserCurrentMonthBills adds the given related objects to the existing relationships
// of the user_bank, optionally inserting them as new records.
// Appends related to o.R.BankUserCurrentMonthBills.
// Sets related.R.BankUser appropriately.
func (o *UserBank) AddBankUserCurrentMonthBills(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurrentMonthBill) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"current_month_bills\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bank_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, currentMonthBillPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userBankR{
			BankUserCurrentMonthBills: related,
		}
	} else {
		o.R.BankUserCurrentMonthBills = append(o.R.BankUserCurrentMonthBills, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentMonthBillR{
				BankUser: o,
			}
		} else {
			rel.R.BankUser = o
		}
	}
	return nil
}

// AddBankUserCurrentMonthIncomes adds the given related objects to the existing relationships
// of the user_bank, optionally inserting them as new records.
// Appends related to o.R.BankUserCurrentMonthIncomes.
// Sets related.R.BankUser appropriately.
func (o *UserBank) AddBankUserCurrentMonthIncomes(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CurrentMonthIncome) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.BankUserID = o.ID
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"current_month_income\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"bank_user_id"}),
				strmangle.WhereClause("\"", "\"", 2, currentMonthIncomePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.BankUserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &userBankR{
			BankUserCurrentMonthIncomes: related,
		}
	} else {
		o.R.BankUserCurrentMonthIncomes = append(o.R.BankUserCurrentMonthIncomes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &currentMonthIncomeR{
				BankUser: o,
			}
		} else {
			rel.R.BankUser = o
		}
	}
	return nil
}

// AddFromBankTransactions adds the given related objects to the existing relationships
// of the user_bank, optionally inserting them as new records.
// Appends related to o.R.FromBankTransactions.
// Sets related.R.FromBank appropriately.
func (o *UserBank) AddFromBankTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.FromBankID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"from_bank_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.FromBankID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userBankR{
			FromBankTransactions: related,
		}
	} else {
		o.R.FromBankTransactions = append(o.R.FromBankTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				FromBank: o,
			}
		} else {
			rel.R.FromBank = o
		}
	}
	return nil
}

// SetFromBankTransactions removes all previously related items of the
// user_bank replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.FromBank's FromBankTransactions accordingly.
// Replaces o.R.FromBankTransactions with related.
// Sets related.R.FromBank's FromBankTransactions accordingly.
func (o *UserBank) SetFromBankTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"from_bank_id\" = null where \"from_bank_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.FromBankTransactions {
			queries.SetScanner(&rel.FromBankID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.FromBank = nil
		}
		o.R.FromBankTransactions = nil
	}

	return o.AddFromBankTransactions(ctx, exec, insert, related...)
}

// RemoveFromBankTransactions relationships from objects passed in.
// Removes related items from R.FromBankTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.FromBank.
func (o *UserBank) RemoveFromBankTransactions(ctx context.Context, exec boil.ContextExecutor, related ...*Transaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.FromBankID, nil)
		if rel.R != nil {
			rel.R.FromBank = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("from_bank_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.FromBankTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.FromBankTransactions)
			if ln > 1 && i < ln-1 {
				o.R.FromBankTransactions[i] = o.R.FromBankTransactions[ln-1]
			}
			o.R.FromBankTransactions = o.R.FromBankTransactions[:ln-1]
			break
		}
	}

	return nil
}

// AddToBankTransactions adds the given related objects to the existing relationships
// of the user_bank, optionally inserting them as new records.
// Appends related to o.R.ToBankTransactions.
// Sets related.R.ToBank appropriately.
func (o *UserBank) AddToBankTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.ToBankID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transactions\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"to_bank_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.ToBankID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &userBankR{
			ToBankTransactions: related,
		}
	} else {
		o.R.ToBankTransactions = append(o.R.ToBankTransactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				ToBank: o,
			}
		} else {
			rel.R.ToBank = o
		}
	}
	return nil
}

// SetToBankTransactions removes all previously related items of the
// user_bank replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.ToBank's ToBankTransactions accordingly.
// Replaces o.R.ToBankTransactions with related.
// Sets related.R.ToBank's ToBankTransactions accordingly.
func (o *UserBank) SetToBankTransactions(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*Transaction) error {
	query := "update \"transactions\" set \"to_bank_id\" = null where \"to_bank_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.ToBankTransactions {
			queries.SetScanner(&rel.ToBankID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.ToBank = nil
		}
		o.R.ToBankTransactions = nil
	}

	return o.AddToBankTransactions(ctx, exec, insert, related...)
}

// RemoveToBankTransactions relationships from objects passed in.
// Removes related items from R.ToBankTransactions (uses pointer comparison, removal does not keep order)
// Sets related.R.ToBank.
func (o *UserBank) RemoveToBankTransactions(ctx context.Context, exec boil.ContextExecutor, related ...*Transaction) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.ToBankID, nil)
		if rel.R != nil {
			rel.R.ToBank = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("to_bank_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.ToBankTransactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.ToBankTransactions)
			if ln > 1 && i < ln-1 {
				o.R.ToBankTransactions[i] = o.R.ToBankTransactions[ln-1]
			}
			o.R.ToBankTransactions = o.R.ToBankTransactions[:ln-1]
			break
		}
	}

	return nil
}

// UserBanks retrieves all the records using an executor.
func UserBanks(mods ...qm.QueryMod) userBankQuery {
	mods = append(mods, qm.From("\"user_banks\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_banks\".*"})
	}

	return userBankQuery{q}
}

// FindUserBank retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserBank(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*UserBank, error) {
	userBankObj := &UserBank{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_banks\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, userBankObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_banks")
	}

	if err = userBankObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userBankObj, err
	}

	return userBankObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserBank) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_banks provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		if queries.MustTime(o.UpdatedAt).IsZero() {
			queries.SetScanner(&o.UpdatedAt, currTime)
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBankColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userBankInsertCacheMut.RLock()
	cache, cached := userBankInsertCache[key]
	userBankInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userBankAllColumns,
			userBankColumnsWithDefault,
			userBankColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userBankType, userBankMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userBankType, userBankMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_banks\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_banks\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_banks")
	}

	if !cached {
		userBankInsertCacheMut.Lock()
		userBankInsertCache[key] = cache
		userBankInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserBank.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserBank) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userBankUpdateCacheMut.RLock()
	cache, cached := userBankUpdateCache[key]
	userBankUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userBankAllColumns,
			userBankPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_banks, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_banks\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userBankPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userBankType, userBankMapping, append(wl, userBankPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_banks row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_banks")
	}

	if !cached {
		userBankUpdateCacheMut.Lock()
		userBankUpdateCache[key] = cache
		userBankUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userBankQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_banks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_banks")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserBankSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_banks\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userBankPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userBank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userBank")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserBank) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no user_banks provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if queries.MustTime(o.CreatedAt).IsZero() {
			queries.SetScanner(&o.CreatedAt, currTime)
		}
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userBankColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userBankUpsertCacheMut.RLock()
	cache, cached := userBankUpsertCache[key]
	userBankUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userBankAllColumns,
			userBankColumnsWithDefault,
			userBankColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userBankAllColumns,
			userBankPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_banks, could not build update column list")
		}

		ret := strmangle.SetComplement(userBankAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userBankPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert user_banks, could not build conflict column list")
			}

			conflict = make([]string, len(userBankPrimaryKeyColumns))
			copy(conflict, userBankPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_banks\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userBankType, userBankMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userBankType, userBankMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_banks")
	}

	if !cached {
		userBankUpsertCacheMut.Lock()
		userBankUpsertCache[key] = cache
		userBankUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserBank record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserBank) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserBank provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userBankPrimaryKeyMapping)
	sql := "DELETE FROM \"user_banks\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_banks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_banks")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userBankQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userBankQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_banks")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_banks")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserBankSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userBankBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_banks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBankPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userBank slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_banks")
	}

	if len(userBankAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserBank) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserBank(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserBankSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserBankSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userBankPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_banks\".* FROM \"user_banks\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userBankPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserBankSlice")
	}

	*o = slice

	return nil
}

// UserBankExists checks if the UserBank row exists.
func UserBankExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_banks\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_banks exists")
	}

	return exists, nil
}

// Exists checks if the UserBank row exists.
func (o *UserBank) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return UserBankExists(ctx, exec, o.ID)
}
