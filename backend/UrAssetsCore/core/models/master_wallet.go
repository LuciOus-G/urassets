// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MasterWallet is an object representing the database table.
type MasterWallet struct {
	Wid          string      `boil:"wid" json:"wid" toml:"wid" yaml:"wid"`
	MasterUserID null.String `boil:"master_user_id" json:"master_user_id,omitempty" toml:"master_user_id" yaml:"master_user_id,omitempty"`
	Balance      string      `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`

	R *masterWalletR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L masterWalletL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MasterWalletColumns = struct {
	Wid          string
	MasterUserID string
	Balance      string
}{
	Wid:          "wid",
	MasterUserID: "master_user_id",
	Balance:      "balance",
}

var MasterWalletTableColumns = struct {
	Wid          string
	MasterUserID string
	Balance      string
}{
	Wid:          "master_wallet.wid",
	MasterUserID: "master_wallet.master_user_id",
	Balance:      "master_wallet.balance",
}

// Generated where

var MasterWalletWhere = struct {
	Wid          whereHelperstring
	MasterUserID whereHelpernull_String
	Balance      whereHelperstring
}{
	Wid:          whereHelperstring{field: "\"master_wallet\".\"wid\""},
	MasterUserID: whereHelpernull_String{field: "\"master_wallet\".\"master_user_id\""},
	Balance:      whereHelperstring{field: "\"master_wallet\".\"balance\""},
}

// MasterWalletRels is where relationship names are stored.
var MasterWalletRels = struct {
	MasterUser string
}{
	MasterUser: "MasterUser",
}

// masterWalletR is where relationships are stored.
type masterWalletR struct {
	MasterUser *MasterUser `boil:"MasterUser" json:"MasterUser" toml:"MasterUser" yaml:"MasterUser"`
}

// NewStruct creates a new relationship struct
func (*masterWalletR) NewStruct() *masterWalletR {
	return &masterWalletR{}
}

func (r *masterWalletR) GetMasterUser() *MasterUser {
	if r == nil {
		return nil
	}
	return r.MasterUser
}

// masterWalletL is where Load methods for each relationship are stored.
type masterWalletL struct{}

var (
	masterWalletAllColumns            = []string{"wid", "master_user_id", "balance"}
	masterWalletColumnsWithoutDefault = []string{}
	masterWalletColumnsWithDefault    = []string{"wid", "master_user_id", "balance"}
	masterWalletPrimaryKeyColumns     = []string{"wid"}
	masterWalletGeneratedColumns      = []string{}
)

type (
	// MasterWalletSlice is an alias for a slice of pointers to MasterWallet.
	// This should almost always be used instead of []MasterWallet.
	MasterWalletSlice []*MasterWallet
	// MasterWalletHook is the signature for custom MasterWallet hook methods
	MasterWalletHook func(context.Context, boil.ContextExecutor, *MasterWallet) error

	masterWalletQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	masterWalletType                 = reflect.TypeOf(&MasterWallet{})
	masterWalletMapping              = queries.MakeStructMapping(masterWalletType)
	masterWalletPrimaryKeyMapping, _ = queries.BindMapping(masterWalletType, masterWalletMapping, masterWalletPrimaryKeyColumns)
	masterWalletInsertCacheMut       sync.RWMutex
	masterWalletInsertCache          = make(map[string]insertCache)
	masterWalletUpdateCacheMut       sync.RWMutex
	masterWalletUpdateCache          = make(map[string]updateCache)
	masterWalletUpsertCacheMut       sync.RWMutex
	masterWalletUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var masterWalletAfterSelectMu sync.Mutex
var masterWalletAfterSelectHooks []MasterWalletHook

var masterWalletBeforeInsertMu sync.Mutex
var masterWalletBeforeInsertHooks []MasterWalletHook
var masterWalletAfterInsertMu sync.Mutex
var masterWalletAfterInsertHooks []MasterWalletHook

var masterWalletBeforeUpdateMu sync.Mutex
var masterWalletBeforeUpdateHooks []MasterWalletHook
var masterWalletAfterUpdateMu sync.Mutex
var masterWalletAfterUpdateHooks []MasterWalletHook

var masterWalletBeforeDeleteMu sync.Mutex
var masterWalletBeforeDeleteHooks []MasterWalletHook
var masterWalletAfterDeleteMu sync.Mutex
var masterWalletAfterDeleteHooks []MasterWalletHook

var masterWalletBeforeUpsertMu sync.Mutex
var masterWalletBeforeUpsertHooks []MasterWalletHook
var masterWalletAfterUpsertMu sync.Mutex
var masterWalletAfterUpsertHooks []MasterWalletHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MasterWallet) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MasterWallet) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MasterWallet) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MasterWallet) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MasterWallet) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MasterWallet) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MasterWallet) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MasterWallet) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MasterWallet) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range masterWalletAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMasterWalletHook registers your hook function for all future operations.
func AddMasterWalletHook(hookPoint boil.HookPoint, masterWalletHook MasterWalletHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		masterWalletAfterSelectMu.Lock()
		masterWalletAfterSelectHooks = append(masterWalletAfterSelectHooks, masterWalletHook)
		masterWalletAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		masterWalletBeforeInsertMu.Lock()
		masterWalletBeforeInsertHooks = append(masterWalletBeforeInsertHooks, masterWalletHook)
		masterWalletBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		masterWalletAfterInsertMu.Lock()
		masterWalletAfterInsertHooks = append(masterWalletAfterInsertHooks, masterWalletHook)
		masterWalletAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		masterWalletBeforeUpdateMu.Lock()
		masterWalletBeforeUpdateHooks = append(masterWalletBeforeUpdateHooks, masterWalletHook)
		masterWalletBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		masterWalletAfterUpdateMu.Lock()
		masterWalletAfterUpdateHooks = append(masterWalletAfterUpdateHooks, masterWalletHook)
		masterWalletAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		masterWalletBeforeDeleteMu.Lock()
		masterWalletBeforeDeleteHooks = append(masterWalletBeforeDeleteHooks, masterWalletHook)
		masterWalletBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		masterWalletAfterDeleteMu.Lock()
		masterWalletAfterDeleteHooks = append(masterWalletAfterDeleteHooks, masterWalletHook)
		masterWalletAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		masterWalletBeforeUpsertMu.Lock()
		masterWalletBeforeUpsertHooks = append(masterWalletBeforeUpsertHooks, masterWalletHook)
		masterWalletBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		masterWalletAfterUpsertMu.Lock()
		masterWalletAfterUpsertHooks = append(masterWalletAfterUpsertHooks, masterWalletHook)
		masterWalletAfterUpsertMu.Unlock()
	}
}

// One returns a single masterWallet record from the query.
func (q masterWalletQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MasterWallet, error) {
	o := &MasterWallet{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for master_wallet")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MasterWallet records from the query.
func (q masterWalletQuery) All(ctx context.Context, exec boil.ContextExecutor) (MasterWalletSlice, error) {
	var o []*MasterWallet

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MasterWallet slice")
	}

	if len(masterWalletAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MasterWallet records in the query.
func (q masterWalletQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count master_wallet rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q masterWalletQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if master_wallet exists")
	}

	return count > 0, nil
}

// MasterUser pointed to by the foreign key.
func (o *MasterWallet) MasterUser(mods ...qm.QueryMod) masterUserQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"uid\" = ?", o.MasterUserID),
	}

	queryMods = append(queryMods, mods...)

	return MasterUsers(queryMods...)
}

// LoadMasterUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (masterWalletL) LoadMasterUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMasterWallet interface{}, mods queries.Applicator) error {
	var slice []*MasterWallet
	var object *MasterWallet

	if singular {
		var ok bool
		object, ok = maybeMasterWallet.(*MasterWallet)
		if !ok {
			object = new(MasterWallet)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMasterWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMasterWallet))
			}
		}
	} else {
		s, ok := maybeMasterWallet.(*[]*MasterWallet)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMasterWallet)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMasterWallet))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &masterWalletR{}
		}
		if !queries.IsNil(object.MasterUserID) {
			args[object.MasterUserID] = struct{}{}
		}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &masterWalletR{}
			}

			if !queries.IsNil(obj.MasterUserID) {
				args[obj.MasterUserID] = struct{}{}
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`master_users`),
		qm.WhereIn(`master_users.uid in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load MasterUser")
	}

	var resultSlice []*MasterUser
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice MasterUser")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for master_users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for master_users")
	}

	if len(masterUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.MasterUser = foreign
		if foreign.R == nil {
			foreign.R = &masterUserR{}
		}
		foreign.R.MasterWallets = append(foreign.R.MasterWallets, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.MasterUserID, foreign.UID) {
				local.R.MasterUser = foreign
				if foreign.R == nil {
					foreign.R = &masterUserR{}
				}
				foreign.R.MasterWallets = append(foreign.R.MasterWallets, local)
				break
			}
		}
	}

	return nil
}

// SetMasterUser of the masterWallet to the related item.
// Sets o.R.MasterUser to related.
// Adds o to related.R.MasterWallets.
func (o *MasterWallet) SetMasterUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *MasterUser) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"master_wallet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"master_user_id"}),
		strmangle.WhereClause("\"", "\"", 2, masterWalletPrimaryKeyColumns),
	)
	values := []interface{}{related.UID, o.Wid}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.MasterUserID, related.UID)
	if o.R == nil {
		o.R = &masterWalletR{
			MasterUser: related,
		}
	} else {
		o.R.MasterUser = related
	}

	if related.R == nil {
		related.R = &masterUserR{
			MasterWallets: MasterWalletSlice{o},
		}
	} else {
		related.R.MasterWallets = append(related.R.MasterWallets, o)
	}

	return nil
}

// RemoveMasterUser relationship.
// Sets o.R.MasterUser to nil.
// Removes o from all passed in related items' relationships struct.
func (o *MasterWallet) RemoveMasterUser(ctx context.Context, exec boil.ContextExecutor, related *MasterUser) error {
	var err error

	queries.SetScanner(&o.MasterUserID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("master_user_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.MasterUser = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.MasterWallets {
		if queries.Equal(o.MasterUserID, ri.MasterUserID) {
			continue
		}

		ln := len(related.R.MasterWallets)
		if ln > 1 && i < ln-1 {
			related.R.MasterWallets[i] = related.R.MasterWallets[ln-1]
		}
		related.R.MasterWallets = related.R.MasterWallets[:ln-1]
		break
	}
	return nil
}

// MasterWallets retrieves all the records using an executor.
func MasterWallets(mods ...qm.QueryMod) masterWalletQuery {
	mods = append(mods, qm.From("\"master_wallet\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"master_wallet\".*"})
	}

	return masterWalletQuery{q}
}

// FindMasterWallet retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMasterWallet(ctx context.Context, exec boil.ContextExecutor, wid string, selectCols ...string) (*MasterWallet, error) {
	masterWalletObj := &MasterWallet{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"master_wallet\" where \"wid\"=$1", sel,
	)

	q := queries.Raw(query, wid)

	err := q.Bind(ctx, exec, masterWalletObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from master_wallet")
	}

	if err = masterWalletObj.doAfterSelectHooks(ctx, exec); err != nil {
		return masterWalletObj, err
	}

	return masterWalletObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MasterWallet) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no master_wallet provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(masterWalletColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	masterWalletInsertCacheMut.RLock()
	cache, cached := masterWalletInsertCache[key]
	masterWalletInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			masterWalletAllColumns,
			masterWalletColumnsWithDefault,
			masterWalletColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(masterWalletType, masterWalletMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(masterWalletType, masterWalletMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"master_wallet\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"master_wallet\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into master_wallet")
	}

	if !cached {
		masterWalletInsertCacheMut.Lock()
		masterWalletInsertCache[key] = cache
		masterWalletInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MasterWallet.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MasterWallet) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	masterWalletUpdateCacheMut.RLock()
	cache, cached := masterWalletUpdateCache[key]
	masterWalletUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			masterWalletAllColumns,
			masterWalletPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update master_wallet, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"master_wallet\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, masterWalletPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(masterWalletType, masterWalletMapping, append(wl, masterWalletPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update master_wallet row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for master_wallet")
	}

	if !cached {
		masterWalletUpdateCacheMut.Lock()
		masterWalletUpdateCache[key] = cache
		masterWalletUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q masterWalletQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for master_wallet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for master_wallet")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MasterWalletSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"master_wallet\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, masterWalletPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in masterWallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all masterWallet")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MasterWallet) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no master_wallet provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(masterWalletColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	masterWalletUpsertCacheMut.RLock()
	cache, cached := masterWalletUpsertCache[key]
	masterWalletUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			masterWalletAllColumns,
			masterWalletColumnsWithDefault,
			masterWalletColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			masterWalletAllColumns,
			masterWalletPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert master_wallet, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(masterWalletPrimaryKeyColumns))
			copy(conflict, masterWalletPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"master_wallet\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(masterWalletType, masterWalletMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(masterWalletType, masterWalletMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert master_wallet")
	}

	if !cached {
		masterWalletUpsertCacheMut.Lock()
		masterWalletUpsertCache[key] = cache
		masterWalletUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MasterWallet record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MasterWallet) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MasterWallet provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), masterWalletPrimaryKeyMapping)
	sql := "DELETE FROM \"master_wallet\" WHERE \"wid\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from master_wallet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for master_wallet")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q masterWalletQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no masterWalletQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from master_wallet")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for master_wallet")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MasterWalletSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(masterWalletBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"master_wallet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, masterWalletPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from masterWallet slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for master_wallet")
	}

	if len(masterWalletAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MasterWallet) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMasterWallet(ctx, exec, o.Wid)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MasterWalletSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MasterWalletSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), masterWalletPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"master_wallet\".* FROM \"master_wallet\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, masterWalletPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MasterWalletSlice")
	}

	*o = slice

	return nil
}

// MasterWalletExists checks if the MasterWallet row exists.
func MasterWalletExists(ctx context.Context, exec boil.ContextExecutor, wid string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"master_wallet\" where \"wid\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, wid)
	}
	row := exec.QueryRowContext(ctx, sql, wid)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if master_wallet exists")
	}

	return exists, nil
}

// Exists checks if the MasterWallet row exists.
func (o *MasterWallet) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MasterWalletExists(ctx, exec, o.Wid)
}
