// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCurrentMonthBalances(t *testing.T) {
	t.Parallel()

	query := CurrentMonthBalances()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCurrentMonthBalancesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrentMonthBalancesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CurrentMonthBalances().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrentMonthBalancesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CurrentMonthBalanceSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCurrentMonthBalancesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CurrentMonthBalanceExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CurrentMonthBalance exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CurrentMonthBalanceExists to return true, but got false.")
	}
}

func testCurrentMonthBalancesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	currentMonthBalanceFound, err := FindCurrentMonthBalance(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if currentMonthBalanceFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCurrentMonthBalancesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CurrentMonthBalances().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCurrentMonthBalancesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CurrentMonthBalances().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCurrentMonthBalancesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	currentMonthBalanceOne := &CurrentMonthBalance{}
	currentMonthBalanceTwo := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, currentMonthBalanceOne, currentMonthBalanceDBTypes, false, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}
	if err = randomize.Struct(seed, currentMonthBalanceTwo, currentMonthBalanceDBTypes, false, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = currentMonthBalanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = currentMonthBalanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CurrentMonthBalances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCurrentMonthBalancesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	currentMonthBalanceOne := &CurrentMonthBalance{}
	currentMonthBalanceTwo := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, currentMonthBalanceOne, currentMonthBalanceDBTypes, false, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}
	if err = randomize.Struct(seed, currentMonthBalanceTwo, currentMonthBalanceDBTypes, false, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = currentMonthBalanceOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = currentMonthBalanceTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func currentMonthBalanceBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func currentMonthBalanceAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CurrentMonthBalance) error {
	*o = CurrentMonthBalance{}
	return nil
}

func testCurrentMonthBalancesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CurrentMonthBalance{}
	o := &CurrentMonthBalance{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance object: %s", err)
	}

	AddCurrentMonthBalanceHook(boil.BeforeInsertHook, currentMonthBalanceBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceBeforeInsertHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.AfterInsertHook, currentMonthBalanceAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceAfterInsertHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.AfterSelectHook, currentMonthBalanceAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceAfterSelectHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.BeforeUpdateHook, currentMonthBalanceBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceBeforeUpdateHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.AfterUpdateHook, currentMonthBalanceAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceAfterUpdateHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.BeforeDeleteHook, currentMonthBalanceBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceBeforeDeleteHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.AfterDeleteHook, currentMonthBalanceAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceAfterDeleteHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.BeforeUpsertHook, currentMonthBalanceBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceBeforeUpsertHooks = []CurrentMonthBalanceHook{}

	AddCurrentMonthBalanceHook(boil.AfterUpsertHook, currentMonthBalanceAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	currentMonthBalanceAfterUpsertHooks = []CurrentMonthBalanceHook{}
}

func testCurrentMonthBalancesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrentMonthBalancesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(currentMonthBalanceColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCurrentMonthBalanceToOneUserBankUsingBankUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CurrentMonthBalance
	var foreign UserBank

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, currentMonthBalanceDBTypes, false, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userBankDBTypes, false, userBankColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserBank struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.BankUsersID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.BankUser().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserBankHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *UserBank) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CurrentMonthBalanceSlice{&local}
	if err = local.L.LoadBankUser(ctx, tx, false, (*[]*CurrentMonthBalance)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BankUser == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.BankUser = nil
	if err = local.L.LoadBankUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.BankUser == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCurrentMonthBalanceToOneSetOpUserBankUsingBankUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CurrentMonthBalance
	var b, c UserBank

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, currentMonthBalanceDBTypes, false, strmangle.SetComplement(currentMonthBalancePrimaryKeyColumns, currentMonthBalanceColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userBankDBTypes, false, strmangle.SetComplement(userBankPrimaryKeyColumns, userBankColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*UserBank{&b, &c} {
		err = a.SetBankUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.BankUser != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.BankUserCurrentMonthBalances[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.BankUsersID != x.ID {
			t.Error("foreign key was wrong value", a.BankUsersID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.BankUsersID))
		reflect.Indirect(reflect.ValueOf(&a.BankUsersID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.BankUsersID != x.ID {
			t.Error("foreign key was wrong value", a.BankUsersID, x.ID)
		}
	}
}

func testCurrentMonthBalancesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCurrentMonthBalancesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CurrentMonthBalanceSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCurrentMonthBalancesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CurrentMonthBalances().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	currentMonthBalanceDBTypes = map[string]string{`ID`: `uuid`, `BankUsersID`: `uuid`, `Balance`: `numeric`, `PeriodMonth`: `date`, `IsFirstBalance`: `boolean`}
	_                          = bytes.MinRead
)

func testCurrentMonthBalancesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(currentMonthBalancePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(currentMonthBalanceAllColumns) == len(currentMonthBalancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCurrentMonthBalancesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(currentMonthBalanceAllColumns) == len(currentMonthBalancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CurrentMonthBalance{}
	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalanceColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, currentMonthBalanceDBTypes, true, currentMonthBalancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(currentMonthBalanceAllColumns, currentMonthBalancePrimaryKeyColumns) {
		fields = currentMonthBalanceAllColumns
	} else {
		fields = strmangle.SetComplement(
			currentMonthBalanceAllColumns,
			currentMonthBalancePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CurrentMonthBalanceSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCurrentMonthBalancesUpsert(t *testing.T) {
	t.Parallel()

	if len(currentMonthBalanceAllColumns) == len(currentMonthBalancePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CurrentMonthBalance{}
	if err = randomize.Struct(seed, &o, currentMonthBalanceDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CurrentMonthBalance: %s", err)
	}

	count, err := CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, currentMonthBalanceDBTypes, false, currentMonthBalancePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CurrentMonthBalance struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CurrentMonthBalance: %s", err)
	}

	count, err = CurrentMonthBalances().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
