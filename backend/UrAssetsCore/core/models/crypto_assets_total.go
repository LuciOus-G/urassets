// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// CryptoAssetsTotal is an object representing the database table.
type CryptoAssetsTotal struct {
	ID     string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID string        `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Name   string        `boil:"name" json:"name" toml:"name" yaml:"name"`
	Symbol string        `boil:"symbol" json:"symbol" toml:"symbol" yaml:"symbol"`
	Value  types.Decimal `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *cryptoAssetsTotalR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L cryptoAssetsTotalL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CryptoAssetsTotalColumns = struct {
	ID     string
	UserID string
	Name   string
	Symbol string
	Value  string
}{
	ID:     "id",
	UserID: "user_id",
	Name:   "name",
	Symbol: "symbol",
	Value:  "value",
}

var CryptoAssetsTotalTableColumns = struct {
	ID     string
	UserID string
	Name   string
	Symbol string
	Value  string
}{
	ID:     "crypto_assets_total.id",
	UserID: "crypto_assets_total.user_id",
	Name:   "crypto_assets_total.name",
	Symbol: "crypto_assets_total.symbol",
	Value:  "crypto_assets_total.value",
}

// Generated where

var CryptoAssetsTotalWhere = struct {
	ID     whereHelperstring
	UserID whereHelperstring
	Name   whereHelperstring
	Symbol whereHelperstring
	Value  whereHelpertypes_Decimal
}{
	ID:     whereHelperstring{field: "\"crypto_assets_total\".\"id\""},
	UserID: whereHelperstring{field: "\"crypto_assets_total\".\"user_id\""},
	Name:   whereHelperstring{field: "\"crypto_assets_total\".\"name\""},
	Symbol: whereHelperstring{field: "\"crypto_assets_total\".\"symbol\""},
	Value:  whereHelpertypes_Decimal{field: "\"crypto_assets_total\".\"value\""},
}

// CryptoAssetsTotalRels is where relationship names are stored.
var CryptoAssetsTotalRels = struct {
	User                  string
	CryptoAssetsHistories string
}{
	User:                  "User",
	CryptoAssetsHistories: "CryptoAssetsHistories",
}

// cryptoAssetsTotalR is where relationships are stored.
type cryptoAssetsTotalR struct {
	User                  *User                    `boil:"User" json:"User" toml:"User" yaml:"User"`
	CryptoAssetsHistories CryptoAssetsHistorySlice `boil:"CryptoAssetsHistories" json:"CryptoAssetsHistories" toml:"CryptoAssetsHistories" yaml:"CryptoAssetsHistories"`
}

// NewStruct creates a new relationship struct
func (*cryptoAssetsTotalR) NewStruct() *cryptoAssetsTotalR {
	return &cryptoAssetsTotalR{}
}

func (r *cryptoAssetsTotalR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

func (r *cryptoAssetsTotalR) GetCryptoAssetsHistories() CryptoAssetsHistorySlice {
	if r == nil {
		return nil
	}
	return r.CryptoAssetsHistories
}

// cryptoAssetsTotalL is where Load methods for each relationship are stored.
type cryptoAssetsTotalL struct{}

var (
	cryptoAssetsTotalAllColumns            = []string{"id", "user_id", "name", "symbol", "value"}
	cryptoAssetsTotalColumnsWithoutDefault = []string{"user_id", "name", "symbol", "value"}
	cryptoAssetsTotalColumnsWithDefault    = []string{"id"}
	cryptoAssetsTotalPrimaryKeyColumns     = []string{"id"}
	cryptoAssetsTotalGeneratedColumns      = []string{}
)

type (
	// CryptoAssetsTotalSlice is an alias for a slice of pointers to CryptoAssetsTotal.
	// This should almost always be used instead of []CryptoAssetsTotal.
	CryptoAssetsTotalSlice []*CryptoAssetsTotal
	// CryptoAssetsTotalHook is the signature for custom CryptoAssetsTotal hook methods
	CryptoAssetsTotalHook func(context.Context, boil.ContextExecutor, *CryptoAssetsTotal) error

	cryptoAssetsTotalQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	cryptoAssetsTotalType                 = reflect.TypeOf(&CryptoAssetsTotal{})
	cryptoAssetsTotalMapping              = queries.MakeStructMapping(cryptoAssetsTotalType)
	cryptoAssetsTotalPrimaryKeyMapping, _ = queries.BindMapping(cryptoAssetsTotalType, cryptoAssetsTotalMapping, cryptoAssetsTotalPrimaryKeyColumns)
	cryptoAssetsTotalInsertCacheMut       sync.RWMutex
	cryptoAssetsTotalInsertCache          = make(map[string]insertCache)
	cryptoAssetsTotalUpdateCacheMut       sync.RWMutex
	cryptoAssetsTotalUpdateCache          = make(map[string]updateCache)
	cryptoAssetsTotalUpsertCacheMut       sync.RWMutex
	cryptoAssetsTotalUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var cryptoAssetsTotalAfterSelectMu sync.Mutex
var cryptoAssetsTotalAfterSelectHooks []CryptoAssetsTotalHook

var cryptoAssetsTotalBeforeInsertMu sync.Mutex
var cryptoAssetsTotalBeforeInsertHooks []CryptoAssetsTotalHook
var cryptoAssetsTotalAfterInsertMu sync.Mutex
var cryptoAssetsTotalAfterInsertHooks []CryptoAssetsTotalHook

var cryptoAssetsTotalBeforeUpdateMu sync.Mutex
var cryptoAssetsTotalBeforeUpdateHooks []CryptoAssetsTotalHook
var cryptoAssetsTotalAfterUpdateMu sync.Mutex
var cryptoAssetsTotalAfterUpdateHooks []CryptoAssetsTotalHook

var cryptoAssetsTotalBeforeDeleteMu sync.Mutex
var cryptoAssetsTotalBeforeDeleteHooks []CryptoAssetsTotalHook
var cryptoAssetsTotalAfterDeleteMu sync.Mutex
var cryptoAssetsTotalAfterDeleteHooks []CryptoAssetsTotalHook

var cryptoAssetsTotalBeforeUpsertMu sync.Mutex
var cryptoAssetsTotalBeforeUpsertHooks []CryptoAssetsTotalHook
var cryptoAssetsTotalAfterUpsertMu sync.Mutex
var cryptoAssetsTotalAfterUpsertHooks []CryptoAssetsTotalHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CryptoAssetsTotal) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CryptoAssetsTotal) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CryptoAssetsTotal) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CryptoAssetsTotal) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CryptoAssetsTotal) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CryptoAssetsTotal) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CryptoAssetsTotal) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CryptoAssetsTotal) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CryptoAssetsTotal) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range cryptoAssetsTotalAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCryptoAssetsTotalHook registers your hook function for all future operations.
func AddCryptoAssetsTotalHook(hookPoint boil.HookPoint, cryptoAssetsTotalHook CryptoAssetsTotalHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		cryptoAssetsTotalAfterSelectMu.Lock()
		cryptoAssetsTotalAfterSelectHooks = append(cryptoAssetsTotalAfterSelectHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		cryptoAssetsTotalBeforeInsertMu.Lock()
		cryptoAssetsTotalBeforeInsertHooks = append(cryptoAssetsTotalBeforeInsertHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		cryptoAssetsTotalAfterInsertMu.Lock()
		cryptoAssetsTotalAfterInsertHooks = append(cryptoAssetsTotalAfterInsertHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		cryptoAssetsTotalBeforeUpdateMu.Lock()
		cryptoAssetsTotalBeforeUpdateHooks = append(cryptoAssetsTotalBeforeUpdateHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		cryptoAssetsTotalAfterUpdateMu.Lock()
		cryptoAssetsTotalAfterUpdateHooks = append(cryptoAssetsTotalAfterUpdateHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		cryptoAssetsTotalBeforeDeleteMu.Lock()
		cryptoAssetsTotalBeforeDeleteHooks = append(cryptoAssetsTotalBeforeDeleteHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		cryptoAssetsTotalAfterDeleteMu.Lock()
		cryptoAssetsTotalAfterDeleteHooks = append(cryptoAssetsTotalAfterDeleteHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		cryptoAssetsTotalBeforeUpsertMu.Lock()
		cryptoAssetsTotalBeforeUpsertHooks = append(cryptoAssetsTotalBeforeUpsertHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		cryptoAssetsTotalAfterUpsertMu.Lock()
		cryptoAssetsTotalAfterUpsertHooks = append(cryptoAssetsTotalAfterUpsertHooks, cryptoAssetsTotalHook)
		cryptoAssetsTotalAfterUpsertMu.Unlock()
	}
}

// One returns a single cryptoAssetsTotal record from the query.
func (q cryptoAssetsTotalQuery) One(ctx context.Context, exec boil.ContextExecutor) (*CryptoAssetsTotal, error) {
	o := &CryptoAssetsTotal{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for crypto_assets_total")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all CryptoAssetsTotal records from the query.
func (q cryptoAssetsTotalQuery) All(ctx context.Context, exec boil.ContextExecutor) (CryptoAssetsTotalSlice, error) {
	var o []*CryptoAssetsTotal

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to CryptoAssetsTotal slice")
	}

	if len(cryptoAssetsTotalAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all CryptoAssetsTotal records in the query.
func (q cryptoAssetsTotalQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count crypto_assets_total rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q cryptoAssetsTotalQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if crypto_assets_total exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *CryptoAssetsTotal) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// CryptoAssetsHistories retrieves all the crypto_assets_history's CryptoAssetsHistories with an executor.
func (o *CryptoAssetsTotal) CryptoAssetsHistories(mods ...qm.QueryMod) cryptoAssetsHistoryQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"crypto_assets_history\".\"crypto_assets_total_id\"=?", o.ID),
	)

	return CryptoAssetsHistories(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (cryptoAssetsTotalL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCryptoAssetsTotal interface{}, mods queries.Applicator) error {
	var slice []*CryptoAssetsTotal
	var object *CryptoAssetsTotal

	if singular {
		var ok bool
		object, ok = maybeCryptoAssetsTotal.(*CryptoAssetsTotal)
		if !ok {
			object = new(CryptoAssetsTotal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCryptoAssetsTotal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCryptoAssetsTotal))
			}
		}
	} else {
		s, ok := maybeCryptoAssetsTotal.(*[]*CryptoAssetsTotal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCryptoAssetsTotal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCryptoAssetsTotal))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cryptoAssetsTotalR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cryptoAssetsTotalR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.CryptoAssetsTotals = append(foreign.R.CryptoAssetsTotals, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.CryptoAssetsTotals = append(foreign.R.CryptoAssetsTotals, local)
				break
			}
		}
	}

	return nil
}

// LoadCryptoAssetsHistories allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (cryptoAssetsTotalL) LoadCryptoAssetsHistories(ctx context.Context, e boil.ContextExecutor, singular bool, maybeCryptoAssetsTotal interface{}, mods queries.Applicator) error {
	var slice []*CryptoAssetsTotal
	var object *CryptoAssetsTotal

	if singular {
		var ok bool
		object, ok = maybeCryptoAssetsTotal.(*CryptoAssetsTotal)
		if !ok {
			object = new(CryptoAssetsTotal)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeCryptoAssetsTotal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeCryptoAssetsTotal))
			}
		}
	} else {
		s, ok := maybeCryptoAssetsTotal.(*[]*CryptoAssetsTotal)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeCryptoAssetsTotal)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeCryptoAssetsTotal))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &cryptoAssetsTotalR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &cryptoAssetsTotalR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`crypto_assets_history`),
		qm.WhereIn(`crypto_assets_history.crypto_assets_total_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load crypto_assets_history")
	}

	var resultSlice []*CryptoAssetsHistory
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice crypto_assets_history")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on crypto_assets_history")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for crypto_assets_history")
	}

	if len(cryptoAssetsHistoryAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.CryptoAssetsHistories = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &cryptoAssetsHistoryR{}
			}
			foreign.R.CryptoAssetsTotal = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if queries.Equal(local.ID, foreign.CryptoAssetsTotalID) {
				local.R.CryptoAssetsHistories = append(local.R.CryptoAssetsHistories, foreign)
				if foreign.R == nil {
					foreign.R = &cryptoAssetsHistoryR{}
				}
				foreign.R.CryptoAssetsTotal = local
				break
			}
		}
	}

	return nil
}

// SetUser of the cryptoAssetsTotal to the related item.
// Sets o.R.User to related.
// Adds o to related.R.CryptoAssetsTotals.
func (o *CryptoAssetsTotal) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"crypto_assets_total\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, cryptoAssetsTotalPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &cryptoAssetsTotalR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			CryptoAssetsTotals: CryptoAssetsTotalSlice{o},
		}
	} else {
		related.R.CryptoAssetsTotals = append(related.R.CryptoAssetsTotals, o)
	}

	return nil
}

// AddCryptoAssetsHistories adds the given related objects to the existing relationships
// of the crypto_assets_total, optionally inserting them as new records.
// Appends related to o.R.CryptoAssetsHistories.
// Sets related.R.CryptoAssetsTotal appropriately.
func (o *CryptoAssetsTotal) AddCryptoAssetsHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CryptoAssetsHistory) error {
	var err error
	for _, rel := range related {
		if insert {
			queries.Assign(&rel.CryptoAssetsTotalID, o.ID)
			if err = rel.Insert(ctx, exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"crypto_assets_history\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"crypto_assets_total_id"}),
				strmangle.WhereClause("\"", "\"", 2, cryptoAssetsHistoryPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.IsDebug(ctx) {
				writer := boil.DebugWriterFrom(ctx)
				fmt.Fprintln(writer, updateQuery)
				fmt.Fprintln(writer, values)
			}
			if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			queries.Assign(&rel.CryptoAssetsTotalID, o.ID)
		}
	}

	if o.R == nil {
		o.R = &cryptoAssetsTotalR{
			CryptoAssetsHistories: related,
		}
	} else {
		o.R.CryptoAssetsHistories = append(o.R.CryptoAssetsHistories, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &cryptoAssetsHistoryR{
				CryptoAssetsTotal: o,
			}
		} else {
			rel.R.CryptoAssetsTotal = o
		}
	}
	return nil
}

// SetCryptoAssetsHistories removes all previously related items of the
// crypto_assets_total replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.CryptoAssetsTotal's CryptoAssetsHistories accordingly.
// Replaces o.R.CryptoAssetsHistories with related.
// Sets related.R.CryptoAssetsTotal's CryptoAssetsHistories accordingly.
func (o *CryptoAssetsTotal) SetCryptoAssetsHistories(ctx context.Context, exec boil.ContextExecutor, insert bool, related ...*CryptoAssetsHistory) error {
	query := "update \"crypto_assets_history\" set \"crypto_assets_total_id\" = null where \"crypto_assets_total_id\" = $1"
	values := []interface{}{o.ID}
	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, query)
		fmt.Fprintln(writer, values)
	}
	_, err := exec.ExecContext(ctx, query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	if o.R != nil {
		for _, rel := range o.R.CryptoAssetsHistories {
			queries.SetScanner(&rel.CryptoAssetsTotalID, nil)
			if rel.R == nil {
				continue
			}

			rel.R.CryptoAssetsTotal = nil
		}
		o.R.CryptoAssetsHistories = nil
	}

	return o.AddCryptoAssetsHistories(ctx, exec, insert, related...)
}

// RemoveCryptoAssetsHistories relationships from objects passed in.
// Removes related items from R.CryptoAssetsHistories (uses pointer comparison, removal does not keep order)
// Sets related.R.CryptoAssetsTotal.
func (o *CryptoAssetsTotal) RemoveCryptoAssetsHistories(ctx context.Context, exec boil.ContextExecutor, related ...*CryptoAssetsHistory) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	for _, rel := range related {
		queries.SetScanner(&rel.CryptoAssetsTotalID, nil)
		if rel.R != nil {
			rel.R.CryptoAssetsTotal = nil
		}
		if _, err = rel.Update(ctx, exec, boil.Whitelist("crypto_assets_total_id")); err != nil {
			return err
		}
	}
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.CryptoAssetsHistories {
			if rel != ri {
				continue
			}

			ln := len(o.R.CryptoAssetsHistories)
			if ln > 1 && i < ln-1 {
				o.R.CryptoAssetsHistories[i] = o.R.CryptoAssetsHistories[ln-1]
			}
			o.R.CryptoAssetsHistories = o.R.CryptoAssetsHistories[:ln-1]
			break
		}
	}

	return nil
}

// CryptoAssetsTotals retrieves all the records using an executor.
func CryptoAssetsTotals(mods ...qm.QueryMod) cryptoAssetsTotalQuery {
	mods = append(mods, qm.From("\"crypto_assets_total\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"crypto_assets_total\".*"})
	}

	return cryptoAssetsTotalQuery{q}
}

// FindCryptoAssetsTotal retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCryptoAssetsTotal(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*CryptoAssetsTotal, error) {
	cryptoAssetsTotalObj := &CryptoAssetsTotal{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"crypto_assets_total\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, cryptoAssetsTotalObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from crypto_assets_total")
	}

	if err = cryptoAssetsTotalObj.doAfterSelectHooks(ctx, exec); err != nil {
		return cryptoAssetsTotalObj, err
	}

	return cryptoAssetsTotalObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CryptoAssetsTotal) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no crypto_assets_total provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cryptoAssetsTotalColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	cryptoAssetsTotalInsertCacheMut.RLock()
	cache, cached := cryptoAssetsTotalInsertCache[key]
	cryptoAssetsTotalInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			cryptoAssetsTotalAllColumns,
			cryptoAssetsTotalColumnsWithDefault,
			cryptoAssetsTotalColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(cryptoAssetsTotalType, cryptoAssetsTotalMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(cryptoAssetsTotalType, cryptoAssetsTotalMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"crypto_assets_total\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"crypto_assets_total\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into crypto_assets_total")
	}

	if !cached {
		cryptoAssetsTotalInsertCacheMut.Lock()
		cryptoAssetsTotalInsertCache[key] = cache
		cryptoAssetsTotalInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the CryptoAssetsTotal.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CryptoAssetsTotal) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	cryptoAssetsTotalUpdateCacheMut.RLock()
	cache, cached := cryptoAssetsTotalUpdateCache[key]
	cryptoAssetsTotalUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			cryptoAssetsTotalAllColumns,
			cryptoAssetsTotalPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update crypto_assets_total, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"crypto_assets_total\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, cryptoAssetsTotalPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(cryptoAssetsTotalType, cryptoAssetsTotalMapping, append(wl, cryptoAssetsTotalPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update crypto_assets_total row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for crypto_assets_total")
	}

	if !cached {
		cryptoAssetsTotalUpdateCacheMut.Lock()
		cryptoAssetsTotalUpdateCache[key] = cache
		cryptoAssetsTotalUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q cryptoAssetsTotalQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for crypto_assets_total")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for crypto_assets_total")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CryptoAssetsTotalSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoAssetsTotalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"crypto_assets_total\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, cryptoAssetsTotalPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in cryptoAssetsTotal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all cryptoAssetsTotal")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CryptoAssetsTotal) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no crypto_assets_total provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(cryptoAssetsTotalColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	cryptoAssetsTotalUpsertCacheMut.RLock()
	cache, cached := cryptoAssetsTotalUpsertCache[key]
	cryptoAssetsTotalUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			cryptoAssetsTotalAllColumns,
			cryptoAssetsTotalColumnsWithDefault,
			cryptoAssetsTotalColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			cryptoAssetsTotalAllColumns,
			cryptoAssetsTotalPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert crypto_assets_total, could not build update column list")
		}

		ret := strmangle.SetComplement(cryptoAssetsTotalAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(cryptoAssetsTotalPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert crypto_assets_total, could not build conflict column list")
			}

			conflict = make([]string, len(cryptoAssetsTotalPrimaryKeyColumns))
			copy(conflict, cryptoAssetsTotalPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"crypto_assets_total\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(cryptoAssetsTotalType, cryptoAssetsTotalMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(cryptoAssetsTotalType, cryptoAssetsTotalMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert crypto_assets_total")
	}

	if !cached {
		cryptoAssetsTotalUpsertCacheMut.Lock()
		cryptoAssetsTotalUpsertCache[key] = cache
		cryptoAssetsTotalUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single CryptoAssetsTotal record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CryptoAssetsTotal) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no CryptoAssetsTotal provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cryptoAssetsTotalPrimaryKeyMapping)
	sql := "DELETE FROM \"crypto_assets_total\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from crypto_assets_total")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for crypto_assets_total")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q cryptoAssetsTotalQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no cryptoAssetsTotalQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from crypto_assets_total")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crypto_assets_total")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CryptoAssetsTotalSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(cryptoAssetsTotalBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoAssetsTotalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"crypto_assets_total\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cryptoAssetsTotalPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from cryptoAssetsTotal slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for crypto_assets_total")
	}

	if len(cryptoAssetsTotalAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CryptoAssetsTotal) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindCryptoAssetsTotal(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CryptoAssetsTotalSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CryptoAssetsTotalSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), cryptoAssetsTotalPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"crypto_assets_total\".* FROM \"crypto_assets_total\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, cryptoAssetsTotalPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in CryptoAssetsTotalSlice")
	}

	*o = slice

	return nil
}

// CryptoAssetsTotalExists checks if the CryptoAssetsTotal row exists.
func CryptoAssetsTotalExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"crypto_assets_total\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if crypto_assets_total exists")
	}

	return exists, nil
}

// Exists checks if the CryptoAssetsTotal row exists.
func (o *CryptoAssetsTotal) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return CryptoAssetsTotalExists(ctx, exec, o.ID)
}
