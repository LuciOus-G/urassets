// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testCryptoAssetsHistories(t *testing.T) {
	t.Parallel()

	query := CryptoAssetsHistories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testCryptoAssetsHistoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCryptoAssetsHistoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := CryptoAssetsHistories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCryptoAssetsHistoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CryptoAssetsHistorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testCryptoAssetsHistoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := CryptoAssetsHistoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if CryptoAssetsHistory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected CryptoAssetsHistoryExists to return true, but got false.")
	}
}

func testCryptoAssetsHistoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	cryptoAssetsHistoryFound, err := FindCryptoAssetsHistory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if cryptoAssetsHistoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testCryptoAssetsHistoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = CryptoAssetsHistories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testCryptoAssetsHistoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := CryptoAssetsHistories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testCryptoAssetsHistoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	cryptoAssetsHistoryOne := &CryptoAssetsHistory{}
	cryptoAssetsHistoryTwo := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, cryptoAssetsHistoryOne, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, cryptoAssetsHistoryTwo, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cryptoAssetsHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cryptoAssetsHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CryptoAssetsHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testCryptoAssetsHistoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	cryptoAssetsHistoryOne := &CryptoAssetsHistory{}
	cryptoAssetsHistoryTwo := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, cryptoAssetsHistoryOne, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}
	if err = randomize.Struct(seed, cryptoAssetsHistoryTwo, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = cryptoAssetsHistoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = cryptoAssetsHistoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func cryptoAssetsHistoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func cryptoAssetsHistoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsHistory) error {
	*o = CryptoAssetsHistory{}
	return nil
}

func testCryptoAssetsHistoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &CryptoAssetsHistory{}
	o := &CryptoAssetsHistory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory object: %s", err)
	}

	AddCryptoAssetsHistoryHook(boil.BeforeInsertHook, cryptoAssetsHistoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryBeforeInsertHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.AfterInsertHook, cryptoAssetsHistoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryAfterInsertHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.AfterSelectHook, cryptoAssetsHistoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryAfterSelectHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.BeforeUpdateHook, cryptoAssetsHistoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryBeforeUpdateHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.AfterUpdateHook, cryptoAssetsHistoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryAfterUpdateHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.BeforeDeleteHook, cryptoAssetsHistoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryBeforeDeleteHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.AfterDeleteHook, cryptoAssetsHistoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryAfterDeleteHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.BeforeUpsertHook, cryptoAssetsHistoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryBeforeUpsertHooks = []CryptoAssetsHistoryHook{}

	AddCryptoAssetsHistoryHook(boil.AfterUpsertHook, cryptoAssetsHistoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	cryptoAssetsHistoryAfterUpsertHooks = []CryptoAssetsHistoryHook{}
}

func testCryptoAssetsHistoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCryptoAssetsHistoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(cryptoAssetsHistoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testCryptoAssetsHistoryToOneCryptoAssetsTotalUsingCryptoAssetsTotal(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CryptoAssetsHistory
	var foreign CryptoAssetsTotal

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, cryptoAssetsTotalDBTypes, false, cryptoAssetsTotalColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsTotal struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.CryptoAssetsTotalID, foreign.ID)
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.CryptoAssetsTotal().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddCryptoAssetsTotalHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *CryptoAssetsTotal) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CryptoAssetsHistorySlice{&local}
	if err = local.L.LoadCryptoAssetsTotal(ctx, tx, false, (*[]*CryptoAssetsHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CryptoAssetsTotal == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.CryptoAssetsTotal = nil
	if err = local.L.LoadCryptoAssetsTotal(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.CryptoAssetsTotal == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCryptoAssetsHistoryToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local CryptoAssetsHistory
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := CryptoAssetsHistorySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*CryptoAssetsHistory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testCryptoAssetsHistoryToOneSetOpCryptoAssetsTotalUsingCryptoAssetsTotal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsHistory
	var b, c CryptoAssetsTotal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsHistoryDBTypes, false, strmangle.SetComplement(cryptoAssetsHistoryPrimaryKeyColumns, cryptoAssetsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*CryptoAssetsTotal{&b, &c} {
		err = a.SetCryptoAssetsTotal(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.CryptoAssetsTotal != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CryptoAssetsHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.CryptoAssetsTotalID, x.ID) {
			t.Error("foreign key was wrong value", a.CryptoAssetsTotalID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.CryptoAssetsTotalID))
		reflect.Indirect(reflect.ValueOf(&a.CryptoAssetsTotalID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.CryptoAssetsTotalID, x.ID) {
			t.Error("foreign key was wrong value", a.CryptoAssetsTotalID, x.ID)
		}
	}
}

func testCryptoAssetsHistoryToOneRemoveOpCryptoAssetsTotalUsingCryptoAssetsTotal(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsHistory
	var b CryptoAssetsTotal

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsHistoryDBTypes, false, strmangle.SetComplement(cryptoAssetsHistoryPrimaryKeyColumns, cryptoAssetsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, cryptoAssetsTotalDBTypes, false, strmangle.SetComplement(cryptoAssetsTotalPrimaryKeyColumns, cryptoAssetsTotalColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetCryptoAssetsTotal(ctx, tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveCryptoAssetsTotal(ctx, tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.CryptoAssetsTotal().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.CryptoAssetsTotal != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.CryptoAssetsTotalID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.CryptoAssetsHistories) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testCryptoAssetsHistoryToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a CryptoAssetsHistory
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, cryptoAssetsHistoryDBTypes, false, strmangle.SetComplement(cryptoAssetsHistoryPrimaryKeyColumns, cryptoAssetsHistoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.CryptoAssetsHistories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testCryptoAssetsHistoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCryptoAssetsHistoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := CryptoAssetsHistorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testCryptoAssetsHistoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := CryptoAssetsHistories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	cryptoAssetsHistoryDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `CryptoAssetsTotalID`: `uuid`, `Name`: `character varying`, `Symbol`: `character varying`, `Value`: `numeric`, `CreatedAt`: `timestamp with time zone`}
	_                          = bytes.MinRead
)

func testCryptoAssetsHistoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(cryptoAssetsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(cryptoAssetsHistoryAllColumns) == len(cryptoAssetsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testCryptoAssetsHistoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(cryptoAssetsHistoryAllColumns) == len(cryptoAssetsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &CryptoAssetsHistory{}
	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, cryptoAssetsHistoryDBTypes, true, cryptoAssetsHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(cryptoAssetsHistoryAllColumns, cryptoAssetsHistoryPrimaryKeyColumns) {
		fields = cryptoAssetsHistoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			cryptoAssetsHistoryAllColumns,
			cryptoAssetsHistoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := CryptoAssetsHistorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testCryptoAssetsHistoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(cryptoAssetsHistoryAllColumns) == len(cryptoAssetsHistoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := CryptoAssetsHistory{}
	if err = randomize.Struct(seed, &o, cryptoAssetsHistoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CryptoAssetsHistory: %s", err)
	}

	count, err := CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, cryptoAssetsHistoryDBTypes, false, cryptoAssetsHistoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize CryptoAssetsHistory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert CryptoAssetsHistory: %s", err)
	}

	count, err = CryptoAssetsHistories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
