// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserSteps(t *testing.T) {
	t.Parallel()

	query := UserSteps()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserStepsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserStepsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserSteps().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserStepsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserStepSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserStepsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserStepExists(ctx, tx, o.UserID)
	if err != nil {
		t.Errorf("Unable to check if UserStep exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserStepExists to return true, but got false.")
	}
}

func testUserStepsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userStepFound, err := FindUserStep(ctx, tx, o.UserID)
	if err != nil {
		t.Error(err)
	}

	if userStepFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserStepsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserSteps().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserStepsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserSteps().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserStepsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userStepOne := &UserStep{}
	userStepTwo := &UserStep{}
	if err = randomize.Struct(seed, userStepOne, userStepDBTypes, false, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}
	if err = randomize.Struct(seed, userStepTwo, userStepDBTypes, false, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userStepOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userStepTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserSteps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserStepsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userStepOne := &UserStep{}
	userStepTwo := &UserStep{}
	if err = randomize.Struct(seed, userStepOne, userStepDBTypes, false, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}
	if err = randomize.Struct(seed, userStepTwo, userStepDBTypes, false, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userStepOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userStepTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userStepBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func userStepAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserStep) error {
	*o = UserStep{}
	return nil
}

func testUserStepsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserStep{}
	o := &UserStep{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userStepDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserStep object: %s", err)
	}

	AddUserStepHook(boil.BeforeInsertHook, userStepBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userStepBeforeInsertHooks = []UserStepHook{}

	AddUserStepHook(boil.AfterInsertHook, userStepAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userStepAfterInsertHooks = []UserStepHook{}

	AddUserStepHook(boil.AfterSelectHook, userStepAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userStepAfterSelectHooks = []UserStepHook{}

	AddUserStepHook(boil.BeforeUpdateHook, userStepBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userStepBeforeUpdateHooks = []UserStepHook{}

	AddUserStepHook(boil.AfterUpdateHook, userStepAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userStepAfterUpdateHooks = []UserStepHook{}

	AddUserStepHook(boil.BeforeDeleteHook, userStepBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userStepBeforeDeleteHooks = []UserStepHook{}

	AddUserStepHook(boil.AfterDeleteHook, userStepAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userStepAfterDeleteHooks = []UserStepHook{}

	AddUserStepHook(boil.BeforeUpsertHook, userStepBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userStepBeforeUpsertHooks = []UserStepHook{}

	AddUserStepHook(boil.AfterUpsertHook, userStepAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userStepAfterUpsertHooks = []UserStepHook{}
}

func testUserStepsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserStepsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userStepColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserStepToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserStep
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userStepDBTypes, false, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserStepSlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserStep)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserStepToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserStep
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userStepDBTypes, false, strmangle.SetComplement(userStepPrimaryKeyColumns, userStepColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserStep != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		if exists, err := UserStepExists(ctx, tx, a.UserID); err != nil {
			t.Fatal(err)
		} else if !exists {
			t.Error("want 'a' to exist")
		}

	}
}

func testUserStepsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserStepsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserStepSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserStepsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserSteps().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userStepDBTypes = map[string]string{`UserID`: `uuid`, `Step1`: `boolean`, `Step2`: `boolean`, `Step3`: `boolean`, `IsComplete`: `boolean`}
	_               = bytes.MinRead
)

func testUserStepsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userStepPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userStepAllColumns) == len(userStepPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserStepsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userStepAllColumns) == len(userStepPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserStep{}
	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userStepDBTypes, true, userStepPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userStepAllColumns, userStepPrimaryKeyColumns) {
		fields = userStepAllColumns
	} else {
		fields = strmangle.SetComplement(
			userStepAllColumns,
			userStepPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserStepSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserStepsUpsert(t *testing.T) {
	t.Parallel()

	if len(userStepAllColumns) == len(userStepPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserStep{}
	if err = randomize.Struct(seed, &o, userStepDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserStep: %s", err)
	}

	count, err := UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userStepDBTypes, false, userStepPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserStep struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserStep: %s", err)
	}

	count, err = UserSteps().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
