// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/v4/types"
	"github.com/volatiletech/strmangle"
)

// TotalWealth is an object representing the database table.
type TotalWealth struct {
	// Auto Generate UUID V4
	ID      string        `boil:"id" json:"id" toml:"id" yaml:"id"`
	UserID  string        `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	Balance types.Decimal `boil:"balance" json:"balance" toml:"balance" yaml:"balance"`

	R *totalWealthR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L totalWealthL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TotalWealthColumns = struct {
	ID      string
	UserID  string
	Balance string
}{
	ID:      "id",
	UserID:  "user_id",
	Balance: "balance",
}

var TotalWealthTableColumns = struct {
	ID      string
	UserID  string
	Balance string
}{
	ID:      "total_wealth.id",
	UserID:  "total_wealth.user_id",
	Balance: "total_wealth.balance",
}

// Generated where

var TotalWealthWhere = struct {
	ID      whereHelperstring
	UserID  whereHelperstring
	Balance whereHelpertypes_Decimal
}{
	ID:      whereHelperstring{field: "\"total_wealth\".\"id\""},
	UserID:  whereHelperstring{field: "\"total_wealth\".\"user_id\""},
	Balance: whereHelpertypes_Decimal{field: "\"total_wealth\".\"balance\""},
}

// TotalWealthRels is where relationship names are stored.
var TotalWealthRels = struct {
	User string
}{
	User: "User",
}

// totalWealthR is where relationships are stored.
type totalWealthR struct {
	User *User `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*totalWealthR) NewStruct() *totalWealthR {
	return &totalWealthR{}
}

func (r *totalWealthR) GetUser() *User {
	if r == nil {
		return nil
	}
	return r.User
}

// totalWealthL is where Load methods for each relationship are stored.
type totalWealthL struct{}

var (
	totalWealthAllColumns            = []string{"id", "user_id", "balance"}
	totalWealthColumnsWithoutDefault = []string{"user_id", "balance"}
	totalWealthColumnsWithDefault    = []string{"id"}
	totalWealthPrimaryKeyColumns     = []string{"id"}
	totalWealthGeneratedColumns      = []string{}
)

type (
	// TotalWealthSlice is an alias for a slice of pointers to TotalWealth.
	// This should almost always be used instead of []TotalWealth.
	TotalWealthSlice []*TotalWealth
	// TotalWealthHook is the signature for custom TotalWealth hook methods
	TotalWealthHook func(context.Context, boil.ContextExecutor, *TotalWealth) error

	totalWealthQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	totalWealthType                 = reflect.TypeOf(&TotalWealth{})
	totalWealthMapping              = queries.MakeStructMapping(totalWealthType)
	totalWealthPrimaryKeyMapping, _ = queries.BindMapping(totalWealthType, totalWealthMapping, totalWealthPrimaryKeyColumns)
	totalWealthInsertCacheMut       sync.RWMutex
	totalWealthInsertCache          = make(map[string]insertCache)
	totalWealthUpdateCacheMut       sync.RWMutex
	totalWealthUpdateCache          = make(map[string]updateCache)
	totalWealthUpsertCacheMut       sync.RWMutex
	totalWealthUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var totalWealthAfterSelectMu sync.Mutex
var totalWealthAfterSelectHooks []TotalWealthHook

var totalWealthBeforeInsertMu sync.Mutex
var totalWealthBeforeInsertHooks []TotalWealthHook
var totalWealthAfterInsertMu sync.Mutex
var totalWealthAfterInsertHooks []TotalWealthHook

var totalWealthBeforeUpdateMu sync.Mutex
var totalWealthBeforeUpdateHooks []TotalWealthHook
var totalWealthAfterUpdateMu sync.Mutex
var totalWealthAfterUpdateHooks []TotalWealthHook

var totalWealthBeforeDeleteMu sync.Mutex
var totalWealthBeforeDeleteHooks []TotalWealthHook
var totalWealthAfterDeleteMu sync.Mutex
var totalWealthAfterDeleteHooks []TotalWealthHook

var totalWealthBeforeUpsertMu sync.Mutex
var totalWealthBeforeUpsertHooks []TotalWealthHook
var totalWealthAfterUpsertMu sync.Mutex
var totalWealthAfterUpsertHooks []TotalWealthHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TotalWealth) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TotalWealth) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TotalWealth) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TotalWealth) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TotalWealth) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TotalWealth) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TotalWealth) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TotalWealth) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TotalWealth) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range totalWealthAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTotalWealthHook registers your hook function for all future operations.
func AddTotalWealthHook(hookPoint boil.HookPoint, totalWealthHook TotalWealthHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		totalWealthAfterSelectMu.Lock()
		totalWealthAfterSelectHooks = append(totalWealthAfterSelectHooks, totalWealthHook)
		totalWealthAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		totalWealthBeforeInsertMu.Lock()
		totalWealthBeforeInsertHooks = append(totalWealthBeforeInsertHooks, totalWealthHook)
		totalWealthBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		totalWealthAfterInsertMu.Lock()
		totalWealthAfterInsertHooks = append(totalWealthAfterInsertHooks, totalWealthHook)
		totalWealthAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		totalWealthBeforeUpdateMu.Lock()
		totalWealthBeforeUpdateHooks = append(totalWealthBeforeUpdateHooks, totalWealthHook)
		totalWealthBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		totalWealthAfterUpdateMu.Lock()
		totalWealthAfterUpdateHooks = append(totalWealthAfterUpdateHooks, totalWealthHook)
		totalWealthAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		totalWealthBeforeDeleteMu.Lock()
		totalWealthBeforeDeleteHooks = append(totalWealthBeforeDeleteHooks, totalWealthHook)
		totalWealthBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		totalWealthAfterDeleteMu.Lock()
		totalWealthAfterDeleteHooks = append(totalWealthAfterDeleteHooks, totalWealthHook)
		totalWealthAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		totalWealthBeforeUpsertMu.Lock()
		totalWealthBeforeUpsertHooks = append(totalWealthBeforeUpsertHooks, totalWealthHook)
		totalWealthBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		totalWealthAfterUpsertMu.Lock()
		totalWealthAfterUpsertHooks = append(totalWealthAfterUpsertHooks, totalWealthHook)
		totalWealthAfterUpsertMu.Unlock()
	}
}

// One returns a single totalWealth record from the query.
func (q totalWealthQuery) One(ctx context.Context, exec boil.ContextExecutor) (*TotalWealth, error) {
	o := &TotalWealth{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for total_wealth")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TotalWealth records from the query.
func (q totalWealthQuery) All(ctx context.Context, exec boil.ContextExecutor) (TotalWealthSlice, error) {
	var o []*TotalWealth

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TotalWealth slice")
	}

	if len(totalWealthAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TotalWealth records in the query.
func (q totalWealthQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count total_wealth rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q totalWealthQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if total_wealth exists")
	}

	return count > 0, nil
}

// User pointed to by the foreign key.
func (o *TotalWealth) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (totalWealthL) LoadUser(ctx context.Context, e boil.ContextExecutor, singular bool, maybeTotalWealth interface{}, mods queries.Applicator) error {
	var slice []*TotalWealth
	var object *TotalWealth

	if singular {
		var ok bool
		object, ok = maybeTotalWealth.(*TotalWealth)
		if !ok {
			object = new(TotalWealth)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeTotalWealth)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeTotalWealth))
			}
		}
	} else {
		s, ok := maybeTotalWealth.(*[]*TotalWealth)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeTotalWealth)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeTotalWealth))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &totalWealthR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &totalWealthR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TotalWealths = append(foreign.R.TotalWealths, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TotalWealths = append(foreign.R.TotalWealths, local)
				break
			}
		}
	}

	return nil
}

// SetUser of the totalWealth to the related item.
// Sets o.R.User to related.
// Adds o to related.R.TotalWealths.
func (o *TotalWealth) SetUser(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"total_wealth\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, totalWealthPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &totalWealthR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			TotalWealths: TotalWealthSlice{o},
		}
	} else {
		related.R.TotalWealths = append(related.R.TotalWealths, o)
	}

	return nil
}

// TotalWealths retrieves all the records using an executor.
func TotalWealths(mods ...qm.QueryMod) totalWealthQuery {
	mods = append(mods, qm.From("\"total_wealth\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"total_wealth\".*"})
	}

	return totalWealthQuery{q}
}

// FindTotalWealth retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTotalWealth(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*TotalWealth, error) {
	totalWealthObj := &TotalWealth{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"total_wealth\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, totalWealthObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from total_wealth")
	}

	if err = totalWealthObj.doAfterSelectHooks(ctx, exec); err != nil {
		return totalWealthObj, err
	}

	return totalWealthObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TotalWealth) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no total_wealth provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(totalWealthColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	totalWealthInsertCacheMut.RLock()
	cache, cached := totalWealthInsertCache[key]
	totalWealthInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			totalWealthAllColumns,
			totalWealthColumnsWithDefault,
			totalWealthColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(totalWealthType, totalWealthMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(totalWealthType, totalWealthMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"total_wealth\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"total_wealth\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into total_wealth")
	}

	if !cached {
		totalWealthInsertCacheMut.Lock()
		totalWealthInsertCache[key] = cache
		totalWealthInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the TotalWealth.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TotalWealth) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	totalWealthUpdateCacheMut.RLock()
	cache, cached := totalWealthUpdateCache[key]
	totalWealthUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			totalWealthAllColumns,
			totalWealthPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update total_wealth, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"total_wealth\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, totalWealthPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(totalWealthType, totalWealthMapping, append(wl, totalWealthPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update total_wealth row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for total_wealth")
	}

	if !cached {
		totalWealthUpdateCacheMut.Lock()
		totalWealthUpdateCache[key] = cache
		totalWealthUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q totalWealthQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for total_wealth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for total_wealth")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TotalWealthSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), totalWealthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"total_wealth\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, totalWealthPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in totalWealth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all totalWealth")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TotalWealth) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("models: no total_wealth provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(totalWealthColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	totalWealthUpsertCacheMut.RLock()
	cache, cached := totalWealthUpsertCache[key]
	totalWealthUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			totalWealthAllColumns,
			totalWealthColumnsWithDefault,
			totalWealthColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			totalWealthAllColumns,
			totalWealthPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert total_wealth, could not build update column list")
		}

		ret := strmangle.SetComplement(totalWealthAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(totalWealthPrimaryKeyColumns) == 0 {
				return errors.New("models: unable to upsert total_wealth, could not build conflict column list")
			}

			conflict = make([]string, len(totalWealthPrimaryKeyColumns))
			copy(conflict, totalWealthPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"total_wealth\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(totalWealthType, totalWealthMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(totalWealthType, totalWealthMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert total_wealth")
	}

	if !cached {
		totalWealthUpsertCacheMut.Lock()
		totalWealthUpsertCache[key] = cache
		totalWealthUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single TotalWealth record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TotalWealth) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TotalWealth provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), totalWealthPrimaryKeyMapping)
	sql := "DELETE FROM \"total_wealth\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from total_wealth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for total_wealth")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q totalWealthQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no totalWealthQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from total_wealth")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for total_wealth")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TotalWealthSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(totalWealthBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), totalWealthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"total_wealth\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, totalWealthPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from totalWealth slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for total_wealth")
	}

	if len(totalWealthAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TotalWealth) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindTotalWealth(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TotalWealthSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TotalWealthSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), totalWealthPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"total_wealth\".* FROM \"total_wealth\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, totalWealthPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TotalWealthSlice")
	}

	*o = slice

	return nil
}

// TotalWealthExists checks if the TotalWealth row exists.
func TotalWealthExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"total_wealth\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if total_wealth exists")
	}

	return exists, nil
}

// Exists checks if the TotalWealth row exists.
func (o *TotalWealth) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return TotalWealthExists(ctx, exec, o.ID)
}
