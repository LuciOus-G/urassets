// Code generated by SQLBoiler 4.18.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserIncomeCategories(t *testing.T) {
	t.Parallel()

	query := UserIncomeCategories()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserIncomeCategoriesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIncomeCategoriesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserIncomeCategories().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIncomeCategoriesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserIncomeCategorySlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserIncomeCategoriesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserIncomeCategoryExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if UserIncomeCategory exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserIncomeCategoryExists to return true, but got false.")
	}
}

func testUserIncomeCategoriesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userIncomeCategoryFound, err := FindUserIncomeCategory(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if userIncomeCategoryFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserIncomeCategoriesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserIncomeCategories().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserIncomeCategoriesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserIncomeCategories().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserIncomeCategoriesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userIncomeCategoryOne := &UserIncomeCategory{}
	userIncomeCategoryTwo := &UserIncomeCategory{}
	if err = randomize.Struct(seed, userIncomeCategoryOne, userIncomeCategoryDBTypes, false, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, userIncomeCategoryTwo, userIncomeCategoryDBTypes, false, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userIncomeCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userIncomeCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserIncomeCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserIncomeCategoriesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userIncomeCategoryOne := &UserIncomeCategory{}
	userIncomeCategoryTwo := &UserIncomeCategory{}
	if err = randomize.Struct(seed, userIncomeCategoryOne, userIncomeCategoryDBTypes, false, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}
	if err = randomize.Struct(seed, userIncomeCategoryTwo, userIncomeCategoryDBTypes, false, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userIncomeCategoryOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userIncomeCategoryTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userIncomeCategoryBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func userIncomeCategoryAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserIncomeCategory) error {
	*o = UserIncomeCategory{}
	return nil
}

func testUserIncomeCategoriesHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserIncomeCategory{}
	o := &UserIncomeCategory{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory object: %s", err)
	}

	AddUserIncomeCategoryHook(boil.BeforeInsertHook, userIncomeCategoryBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryBeforeInsertHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.AfterInsertHook, userIncomeCategoryAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryAfterInsertHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.AfterSelectHook, userIncomeCategoryAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryAfterSelectHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.BeforeUpdateHook, userIncomeCategoryBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryBeforeUpdateHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.AfterUpdateHook, userIncomeCategoryAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryAfterUpdateHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.BeforeDeleteHook, userIncomeCategoryBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryBeforeDeleteHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.AfterDeleteHook, userIncomeCategoryAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryAfterDeleteHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.BeforeUpsertHook, userIncomeCategoryBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryBeforeUpsertHooks = []UserIncomeCategoryHook{}

	AddUserIncomeCategoryHook(boil.AfterUpsertHook, userIncomeCategoryAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userIncomeCategoryAfterUpsertHooks = []UserIncomeCategoryHook{}
}

func testUserIncomeCategoriesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserIncomeCategoriesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userIncomeCategoryColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserIncomeCategoryToOneUserUsingUser(t *testing.T) {
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var local UserIncomeCategory
	var foreign User

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, userIncomeCategoryDBTypes, false, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, userDBTypes, false, userColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize User struct: %s", err)
	}

	if err := foreign.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	ranAfterSelectHook := false
	AddUserHook(boil.AfterSelectHook, func(ctx context.Context, e boil.ContextExecutor, o *User) error {
		ranAfterSelectHook = true
		return nil
	})

	slice := UserIncomeCategorySlice{&local}
	if err = local.L.LoadUser(ctx, tx, false, (*[]*UserIncomeCategory)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(ctx, tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	if !ranAfterSelectHook {
		t.Error("failed to run AfterSelect hook for relationship")
	}
}

func testUserIncomeCategoryToOneSetOpUserUsingUser(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a UserIncomeCategory
	var b, c User

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, userIncomeCategoryDBTypes, false, strmangle.SetComplement(userIncomeCategoryPrimaryKeyColumns, userIncomeCategoryColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userDBTypes, false, strmangle.SetComplement(userPrimaryKeyColumns, userColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*User{&b, &c} {
		err = a.SetUser(ctx, tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserIncomeCategories[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(ctx, tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testUserIncomeCategoriesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserIncomeCategoriesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserIncomeCategorySlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserIncomeCategoriesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserIncomeCategories().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userIncomeCategoryDBTypes = map[string]string{`ID`: `uuid`, `UserID`: `uuid`, `Name`: `character varying`}
	_                         = bytes.MinRead
)

func testUserIncomeCategoriesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userIncomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userIncomeCategoryAllColumns) == len(userIncomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserIncomeCategoriesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userIncomeCategoryAllColumns) == len(userIncomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserIncomeCategory{}
	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userIncomeCategoryDBTypes, true, userIncomeCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userIncomeCategoryAllColumns, userIncomeCategoryPrimaryKeyColumns) {
		fields = userIncomeCategoryAllColumns
	} else {
		fields = strmangle.SetComplement(
			userIncomeCategoryAllColumns,
			userIncomeCategoryPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserIncomeCategorySlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserIncomeCategoriesUpsert(t *testing.T) {
	t.Parallel()

	if len(userIncomeCategoryAllColumns) == len(userIncomeCategoryPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserIncomeCategory{}
	if err = randomize.Struct(seed, &o, userIncomeCategoryDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserIncomeCategory: %s", err)
	}

	count, err := UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userIncomeCategoryDBTypes, false, userIncomeCategoryPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserIncomeCategory struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserIncomeCategory: %s", err)
	}

	count, err = UserIncomeCategories().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
